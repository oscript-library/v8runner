#Использовать ".."
#Использовать asserts
#Использовать fs
#Использовать tempfiles

Перем юТест;
Перем УправлениеКонфигуратором;
Перем Лог;
Перем мВременнаяВыгрузка;
Перем СуффиксКТестам;

Процедура Инициализация()
	
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором;
	
	Лог = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	Лог.УстановитьУровень(УровниЛога.Отладка);

	СуффиксКТестам = "";
	Попытка
		УправлениеКонфигуратором.ИспользоватьВерсиюПлатформы("8.3.12");
	Исключение
		СуффиксКТестам = "Не_Найдена_Платформа_8_3_12_или_старше";;
	КонецПопытки;

КонецПроцедуры

Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	юТест = Тестирование;
	
	ВремСписокТестов = Новый Массив;
		
	ВремСписокТестов.Добавить("ТестДолжен_СоздатьХранилищеРасширенияКонфигурации");
	ВремСписокТестов.Добавить("ТестДолжен_ПроверитьФормированиеФайлаОтчетПоВерсиямРасширенияИзХранилища");
    ВремСписокТестов.Добавить("ТестДолжен_СкопироватьПользователейИзХранилищаРасширения");


	СписокТестов = Новый Массив;
	Для каждого ИмяТеста Из ВремСписокТестов Цикл
		СписокТестов.Добавить(ИмяТеста + СуффиксКТестам);
	КонецЦикла;

	Возврат СписокТестов;
	
КонецФункции


Процедура ТестДолжен_СоздатьХранилищеРасширенияКонфигурации() Экспорт
	
	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();

	УправлениеКонфигуратором.КаталогСборки(ВременныйКаталог);

	КаталогВременногоХранилища = ОбъединитьПути(ВременныйКаталог, "v8r_TempRepositoryAdd");

	ФайлКонфигурации = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "1.0", "1Cv8.cf");
		
	
	УправлениеКонфигуратором.ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации);
	// по идеи надо проверить что конфигурация загружена.
	// Вопрос как?

	ФайлРасширения = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "1.0", "Расширение1.cfe");
	УправлениеКонфигуратором.ЗагрузитьРасширениеИзФайла(ФайлРасширения,"Расширение1");
	

	УправлениеКонфигуратором.СоздатьФайловоеХранилищеРасширения(
									"Расширение1",
									КаталогВременногоХранилища,
									"Администратор");
	Утверждения.ПроверитьИстину(ХранилищеКонфигурацииСуществует(КаталогВременногоХранилища), "Временное хранилище расширения конфигурации должно существовать");

	ВременныеФайлы.УдалитьФайл( КаталогВременногоХранилища );
	УправлениеКонфигуратором.УдалитьВременнуюБазу();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьФормированиеФайлаОтчетПоВерсиямРасширенияИзХранилища() Экспорт
    
    ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();

    УправлениеКонфигуратором.КаталогСборки(ВременныйКаталог);
	ПутьКФайлуОтчета = ПолучитьИмяВременногоФайла("mxl");
    
	КаталогВременногоХранилища = ОбъединитьПути(ВременныйКаталог, "v8r_TempRepositoryAdd");

    ФайлКонфигурации = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "1.0", "1Cv8.cf");
        
    
    УправлениеКонфигуратором.ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации);
	
	ФайлРасширения = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "1.0", "Расширение1.cfe");
	УправлениеКонфигуратором.ЗагрузитьРасширениеИзФайла(ФайлРасширения,"Расширение1");

	УправлениеКонфигуратором.СоздатьФайловоеХранилищеРасширения(
										"Расширение1",
										КаталогВременногоХранилища,
                                    	"Администратор");
    Ожидаем.Что(ХранилищеКонфигурацииСуществует(КаталогВременногоХранилища), "Временное хранилище расширения конфигурации должно существовать");
    
    УправлениеКонфигуратором.ПолучитьОтчетПоВерсиямРасширенияИзХранилища("Расширение1",КаталогВременногоХранилища, "Администратор", , ПутьКФайлуОтчета);
    Ожидаем.Что( ФС.ФайлСуществует( ПутьКФайлуОтчета ) , "Отчет из хранилища расширения конфигурации должен существовать");
    
//	Утверждения.ПроверитьИстину( Не ФС.ФайлСуществует(УправлениеКонфигуратором.ФайлИнформации()), "Внутренний файл информации не должен существовать");

    ВременныеФайлы.УдалитьФайл( ПутьКФайлуОтчета );
    ВременныеФайлы.УдалитьФайл( КаталогВременногоХранилища );
    УправлениеКонфигуратором.УдалитьВременнуюБазу(); 
    
КонецПроцедуры

Процедура ТестДолжен_СкопироватьПользователейИзХранилищаРасширения() Экспорт
    
    ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();
    УправлениеКонфигуратором.КаталогСборки(ВременныйКаталог);

	КаталогВременногоХранилища = ОбъединитьПути(ВременныйКаталог, "v8r_TempRepositoryAdd");

    ФайлКонфигурации = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "1.0", "1Cv8.cf");
        
    
	УправлениеКонфигуратором.ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации);
	
	ФайлРасширения = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "1.0", "Расширение1.cfe");
	УправлениеКонфигуратором.ЗагрузитьРасширениеИзФайла(ФайлРасширения,"Расширение1");
	

	УправлениеКонфигуратором.СоздатьФайловоеХранилищеРасширения(
									"Расширение1",
									КаталогВременногоХранилища,
									"Администратор",
									"ПарольАдминистратора");
	Утверждения.ПроверитьИстину(ХранилищеКонфигурацииСуществует(КаталогВременногоХранилища), "Временное хранилище расширения конфигурации должно существовать");
    
    НовыйПользователь = "ТестовыйПользователь";
    ПарольПользователя = "123";
	УправлениеКонфигуратором.ДобавитьПользователяВХранилищеРасширения("Расширение1",
															КаталогВременногоХранилища, 
                                                            "Администратор",
                                                            "ПарольАдминистратора",
                                                            НовыйПользователь,
                                                            ПарольПользователя,
                                                            ПраваПользователяХранилища.ТолькоЧтение,
                                                            Истина);
    
    ПутьКФайлуВерсии = УправлениеКонфигуратором.ПолучитьВерсиюРасширенияИзХранилища("Расширение1",КаталогВременногоХранилища, НовыйПользователь, ПарольПользователя);
    
    Утверждения.ПроверитьИстину(ФС.ФайлСуществует(ПутьКФайлуВерсии), "Файл конфигурации из хранилища расширения должен существовать");
    
    КаталогВременногоХранилища2 = ОбъединитьПути(ВременныйКаталог, "v8r_TempRepositoryAdd2");

    ФайлКонфигурации = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "1.0", "1Cv8.cf");
        
    
	УправлениеКонфигуратором.ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации);
	ФайлРасширения = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "1.0", "Расширение1.cfe");
	УправлениеКонфигуратором.ЗагрузитьРасширениеИзФайла(ФайлРасширения,"Расширение1");
	

	УправлениеКонфигуратором.СоздатьФайловоеХранилищеРасширения(
									"Расширение1",
									КаталогВременногоХранилища2,
									"Администратор2",
									"ПарольАдминистратора2");
	Утверждения.ПроверитьИстину(ХранилищеКонфигурацииСуществует(КаталогВременногоХранилища2), "Временное хранилище расширения конфигурации должно существовать");
    
    УправлениеКонфигуратором.КопироватьПользователейИзХранилищаРасширения("Расширение1",
															КаталогВременногоХранилища2, 
                                                            "Администратор2",
                                                            "ПарольАдминистратора2",
                                                            КаталогВременногоХранилища,
                                                            "Администратор",
                                                            "ПарольАдминистратора",
                                                            Истина);
    
    ПутьКФайлуВерсии = УправлениеКонфигуратором.ПолучитьВерсиюРасширенияИзХранилища("Расширение1",КаталогВременногоХранилища2, НовыйПользователь, ПарольПользователя);
    
    Утверждения.ПроверитьИстину(ФС.ФайлСуществует(ПутьКФайлуВерсии), "Файл конфигурации из хранилища расширения должен существовать");
    Утверждения.ПроверитьИстину( Не ФС.ФайлСуществует(УправлениеКонфигуратором.ФайлИнформации()), "Внутренний файл информации не должен существовать");

    ВременныеФайлы.УдалитьФайл( КаталогВременногоХранилища );
    ВременныеФайлы.УдалитьФайл( КаталогВременногоХранилища2 );
    ВременныеФайлы.УдалитьФайл( ПутьКФайлуВерсии );
    УправлениеКонфигуратором.УдалитьВременнуюБазу();

КонецПроцедуры


Функция ХранилищеКонфигурацииСуществует(Знач ПапкаХранилища)
    Возврат ФС.ФайлСуществует( ОбъединитьПути(ПапкаХранилища, "1cv8ddb.1CD"));
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////
// Инициализация


Инициализация();
