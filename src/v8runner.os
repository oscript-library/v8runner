
///////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ЗАПУСКОМ КОМАНД 1С:Предприятия 8
//

#Использовать logos
#Использовать tempfiles
#Использовать asserts
#Использовать strings
#Использовать 1commands

Перем мКонтекстКоманды;
Перем мКаталогСборки;
Перем мВыводКоманды;
Перем мПутьКПлатформе1С;
Перем ЭтоWindows Экспорт;
Перем мВерсияПлатформы;

Перем Лог;
Перем мИмяФайлаИнформации;
Перем мФайлИнформацииВнешний;
Перем мОчищатьФайлИнформации;
Перем мТекстФайлаДоВывода;
Перем мОбработчикОжиданияПроцессаGUI;

Перем мПризнакОжиданияВыполненияПрограммы;

//////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс

Процедура УстановитьКонтекст(Знач СтрокаСоединения, Знач Пользователь, Знач Пароль) Экспорт
	мКонтекстКоманды.КлючСоединенияСБазой = СтрокаСоединения;
	мКонтекстКоманды.ИмяПользователя = Пользователь;
	мКонтекстКоманды.Пароль = Пароль;

	ПоказатьКонтекстВРежимеОтладки();
КонецПроцедуры

Функция ПолучитьКонтекст() Экспорт
	КопияКонтекста = СкопироватьСтруктуру(мКонтекстКоманды);
	Возврат КопияКонтекста;
КонецФункции

Процедура ИспользоватьКонтекст(Знач Контекст) Экспорт
	мКонтекстКоманды = СкопироватьСтруктуру(Контекст);
	ПоказатьКонтекстВРежимеОтладки();
КонецПроцедуры

Процедура ПоказатьКонтекстВРежимеОтладки()
	Лог.Отладка("КлючСоединенияСБазой "+ мКонтекстКоманды.КлючСоединенияСБазой);
	Лог.Отладка("ИмяПользователя <"+ мКонтекстКоманды.ИмяПользователя+">");
	Лог.Отладка(?(ПустаяСтрока(мКонтекстКоманды.Пароль), "Пароль не задан", " Задан пароль "+ мКонтекстКоманды.Пароль));
КонецПроцедуры

Функция ПолучитьВерсиюИзХранилища(Знач СтрокаСоединения, Знач ПользовательХранилища, Знач ПарольХранилища, Знач НомерВерсии = Неопределено) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

	Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения+"""");
	Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");

	Если Не ПустаяСтрока(ПарольХранилища) Тогда
		Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
	КонецЕсли;

	ФайлРезультата = ОбъединитьПути(КаталогСборки(), "source.cf");

	Параметры.Добавить("/ConfigurationRepositoryDumpCfg """+ФайлРезультата + """");

	Если Не ПустаяСтрока(НомерВерсии) Тогда
		Параметры.Добавить("-v "+НомерВерсии);
	КонецЕсли;

	ВыполнитьКоманду(Параметры);

	Возврат ФайлРезультата;

КонецФункции

// Построение отчета по истории хранилища. Если параметры группировки не указаны и режим совместимости указан "Не используется", 
//	то отчет формируется с группировкой по версиям. В режимах совместимости "Версия 8.1" и "Версия 8.2.13" отчет формируется с группировкой по объектам. 
//	Если конфигурация базы данных отличается от редактируемой по свойству совместимости, 
//	при обработке командной строки учитывается значение режима совместимости конфигурации базы данных.
// 
//Параметры:
//   СтрокаСоединения - Строка - Строка соединения с хранилищем конфигурации
//   ПользовательХранилища - строка - Пользователь для подключения к хранилищю конфигурации
//   ПарольХранилища - Строка - Пароль пользователь для подключения к хранилищю конфигурации
// 	 ПутьКФайлуРезультата - Строка - путь к файлу, в который выводится отчет (формат mxl)
// 	 НомерНачальнойВерсии - Число - номер сохраненной версии, от которой начинается строиться отчет; (По умолчанию 0)
//   НомерКонечнойВерсии - Число, Неопределено - номер сохраненной версии, по которую строится отчет; (по умолчанию "Неопределено")
//   ТипГруппировки - ТипыГруппировкиОтчетаПоВерсиямХранилища - тип группировкой отчета
//   	ГруппировкаПоОбъектам - признак формирования отчета по версиям с группировкой по объектам;
//   	ГруппировкаПоКоммитам - признак формирования отчета по версиям с группировкой по комментарию. (по умолчанию)
//	
Процедура ПолучитьОтчетПоВерсиямИзХранилища(Знач СтрокаСоединения, 
                        Знач ПользовательХранилища, 
                        Знач ПарольХранилища = "", 
                        Знач ПутьКФайлуРезультата,
                        Знач НомерНачальнойВерсии = 1,
                        Знач НомерКонечнойВерсии = Неопределено,
                        Знач ТипГруппировки = Неопределено) Экспорт

    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения+"""");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");

    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
    КонецЕсли;

    Параметры.Добавить("/ConfigurationRepositoryReport """+ПутьКФайлуРезультата + """");

	Параметры.Добавить("-NBegin "+НомерНачальнойВерсии);

	Если ЗначениеЗаполнено(НомерКонечнойВерсии) Тогда
    
        Параметры.Добавить("-NEnd "+НомерКонечнойВерсии);

    КонецЕслИ;

    Если НЕ ЗначениеЗаполнено(ТипГруппировки) Тогда
        ТипГруппировки = ТипыГруппировкиОтчетаПоВерсиямХранилища.ГруппировкаПоКоммитам;
	КонецЕсли;

	Параметры.Добавить(ТипГруппировки);
    
    ВыполнитьКоманду(Параметры);

КонецПроцедуры

Процедура СоздатьФайлыПоставки(Знач ПутьФайлаПолнойПоставки ="", 
							знач ПутьФайлаПоставкиОбновления = "",
							Знач ДистрибутивыДляОбновления = Неопределено, // Массив файлов дистрибутива cf
							Знач ПутьФайлаСПараметрамиЛицензирования = "") Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
		
	Параметры.Добавить("/CreateDistributionFiles ");

	Если НЕ ЗначениеЗаполнено(ПутьФайлаПолнойПоставки) 
		И НЕ ЗначениеЗаполнено(ПутьФайлаПоставкиОбновления) Тогда
		ВызватьИсключение "Не правильно заданы параметры процедуры <" + "СоздатьФайлыПоставки" +">";
	КонецЕсли;	

	Если ЗначениеЗаполнено(ПутьФайлаПолнойПоставки) Тогда
		Параметры.Добавить("-cffile "+ОбернутьВКавычки(ПутьФайлаПолнойПоставки)+" ");
	КонецЕсли;

	Если ЗначениеЗаполнено(ПутьФайлаПоставкиОбновления) 
		И Не ДистрибутивыДляОбновления = Неопределено 
		И ДистрибутивыДляОбновления.Количество() > 0 Тогда
		
		Параметры.Добавить("-cfufile "+ОбернутьВКавычки(ПутьФайлаПоставкиОбновления)+" ");
	
		// Поддерживаются только файлы cf
		Для каждого ДистрибутивОбновления Из ДистрибутивыДляОбновления Цикл
			
			Параметры.Добавить("-f "+ОбернутьВКавычки(ДистрибутивОбновления)+" ");
	
		КонецЦикла;
	КонецЕсли;	

	Если ЗначениеЗаполнено(ПутьФайлаСПараметрамиЛицензирования) Тогда
		Параметры.Добавить("-digisign "+ОбернутьВКавычки(ПутьФайлаСПараметрамиЛицензирования)+" ");
	КонецЕсли;

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

Процедура СоздатьФайловоеХранилищеКонфигурации(Знач ПапкаХранилища, 
											Знач ПользовательХранилища, 
											Знач ПарольХранилища = "", 
											знач ПодключитьБазуКХранилищю = Ложь) Экспорт
	
	ОбеспечитьКаталог(ПапкаХранилища);
	
	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
		
	Параметры.Добавить("/ConfigurationRepositoryF """+ПапкаХранилища+"""");
	Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");
	
	Если Не ПустаяСтрока(ПарольХранилища) Тогда
		Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
	КонецЕсли;	

	Параметры.Добавить("/ConfigurationRepositoryCreate ");
	
	Параметры.Добавить("-AllowConfigurationChanges");
	Параметры.Добавить("-ChangesAllowedRule ObjectNotSupported");
	Параметры.Добавить("-ChangesNotRecommendedRule ObjectNotSupported");
	
	Если ПодключитьБазуКХранилищю = Ложь Тогда
		Параметры.Добавить("-NoBind");
	КонецЕсли;

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Захват объектов для редактирования в хранилище конфигурации
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищю конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищю конфигурации
//  ПутьКФайлуСоСпискомОбъектов - Строка - Строка путь к файлу xml c содержанием в формате http://its.1c.ru/db/v839doc#bookmark:adm:TI000000712
// 									 путь к файлу формата XML со списком объектов. Если опция используется, будет выполнена попытка захватить только объекты,
//									 указанные в файле. Если опция не используется, будут захвачены все объекты конфигурации. 
//									 Если в списке указаны объекты, захваченныедругим пользователем, эти объекты не будут захвачены и будет выдана ошибка.
//									 При этом доступные для захвата объекта будут захвачены. Подробнее о формате файла см в документации.
//  ПолучатьЗахваченныеОбъекты  - булево - Флаг получения захваченных объектов (По умолчанию равно "Ложь")
//
Процедура ЗахватитьОбъектыВХранилище(Знач СтрокаСоединения, 
    								Знач ПользовательХранилища,
                                    Знач ПарольХранилища = "",
                                    Знач ПутьКФайлуСоСпискомОбъектов = "",
                                    Знач ПолучатьЗахваченныеОбъекты = Ложь) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения+"""");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");
    
    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
    КонецЕсли;	
	
    Параметры.Добавить("/ConfigurationRepositoryLock ");
  
    Если Не ПустаяСтрока(ПутьКФайлуСоСпискомОбъектов) Тогда
        Параметры.Добавить(СтрШаблон("-objects ""%1""", ПутьКФайлуСоСпискомОбъектов));
    КонецЕсли;	

    Если ПолучатьЗахваченныеОбъекты Тогда
        Параметры.Добавить("-revised");
    КонецЕсли;	

    ВыполнитьКоманду(Параметры);
    
КонецПроцедуры // ЗахватитьОбъектыВХранилище()


// Отмена захват объектов для редактирования в хранилище конфигурации
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищю конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищю конфигурации
//  СписокОбъектов  	  - Строка - Строка путь к файлу xml c содержанием в формате http://its.1c.ru/db/v839doc#bookmark:adm:TI000000712
// 									 Если опция используется, будет выполнена попытка отменить захват только для объектов, указанных в файле.
//									 Если опция не используется, захват будет отменен для всех объектов конфигурации. 
//									 При наличии в списке объектов, не захваченных текущим пользователем или захваченных другим пользователем, ошибка выдана не будет
//  ИгнорироватьИзменения  - булево - Флаг игнорирования локальных изменений (По умолчанию равно "Ложь")
//									 Локально измененные объекты будут получены из хранилища, и внесенные изменения будут потеряны. 
//									 Если опция не указана, то при наличии локально измененных объектов операция будет отменена и будет выдана ошибка.
//
Процедура ОтменитьЗахватОбъектовВХранилище(Знач СтрокаСоединения, 
    								Знач ПользовательХранилища,
                                    Знач ПарольХранилища = "",
                                    Знач СписокОбъектов = Неопределено,
                                    Знач ИгнорироватьИзменения = Ложь) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения+"""");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");
    
    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
    КонецЕсли;	
	
    Параметры.Добавить("/ConfigurationRepositoryUnlock ");
  
    Если Не ПустаяСтрока(СписокОбъектов) Тогда
        Параметры.Добавить(СтрШаблон("-objects ""%1""", СписокОбъектов));
    КонецЕсли;	

    Если ИгнорироватьИзменения Тогда
        Параметры.Добавить("-force");
    КонецЕсли;	

    ВыполнитьКоманду(Параметры);
    
КонецПроцедуры // ВыполнитьОтменуЗахватаВХранилище()

// Помещение изменений объектов в хранилище конфигурации
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищю конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищю конфигурации
//  СписокОбъектов  	  - Строка - Строка путь к файлу xml c содержанием в формате http://its.1c.ru/db/v839doc#bookmark:adm:TI000000712
//                                   Если опция используется, будет выполнена попытка поместить только объекты, указанные в файле.
//                                   Если опция не используется, будут помещены изменения всех объектов конфигурации. 
//                                   При наличии в списке объектов, не захваченных текущим пользователем или захваченных другим пользователем, ошибка выдана не будет
//  Комментарий	 	      - Строка - Комментарий к помещаемым. Чтобы установить многострочный комментарий, для каждой строки следует использовать свою опцию comment.
//  ОставитьОбъектыЗахваченными  - булево - оставлять захват для помещенных объектов. 
//  ИгнорироватьУдаленные  - булево - Флаг игнорирования удаления объектов. По умолчанию = Ложь
//                                   Если опция используется, при обнаружении ссылок на удаленные объекты будет выполнена попытка их очистить.
//                                   Если опция не указана, при обнаружении ссылок на удаленные объекты будет выдана ошибка.
//
Процедура ПоместитьИзмененияОбъектовВХранилище(Знач СтрокаСоединения, 
                                    Знач ПользовательХранилища,
                                    Знач ПарольХранилища = "",
                                    Знач СписокОбъектов = Неопределено,
                                    Знач Комментарий = "",
                                    Знач ОставитьОбъектыЗахваченными = Ложь,
                                    Знач ИгнорироватьУдаленные = Ложь) Экспорт

    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения+"""");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");
    
    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
    КонецЕсли;	

    Параметры.Добавить("/ConfigurationRepositoryCommit ");
  
    Если Не ПустаяСтрока(СписокОбъектов) Тогда
        Параметры.Добавить(СтрШаблон("-objects ""%1""", СписокОбъектов));
    КонецЕсли;	

    МассивСтрок = СтрРазделить(Комментарий, Символы.ПС);

    Для Каждого СтрокаКомментария Из МассивСтрок Цикл

        Параметры.Добавить(СтрШаблон("-comment ""%1""", СтрокаКомментария));

    КонецЦикла;

    Если ОставитьОбъектыЗахваченными Тогда
        Параметры.Добавить("-keepLocked");
    КонецЕсли;
    
    Если ИгнорироватьУдаленные Тогда
        Параметры.Добавить("-force");
    КонецЕсли;		

    ВыполнитьКоманду(Параметры);
    
КонецПроцедуры // ПоместитьИзмененияОбъектовВХранилище()


// Установка метки для версии хранилища
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищю конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищю конфигурации
//  Метка  	  			  - Строка - текст метки
//  Комментарий  	  	  - Строка - текст комментария к устанавливаемой метки. 
//  Версия  	  	   	  - Строка - номер версии хранилища, для которого устанавливается метка. 
//									Если версия не указана, метка ставится для самой последнее версии хранилища. 
//									Если указана несуществующая версия, выдается ошибка
//
Процедура УстановитьМеткуДляВерсииВХранилище(Знач СтрокаСоединения, 
                                    Знач ПользовательХранилища,
                                    Знач ПарольХранилища = "",
                                    Знач Метка,
                                    Знач Комментарий = "",
                                   	Знач Версия = ""
                                    ) Экспорт

    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения+"""");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");
    
    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
    КонецЕсли;	

    Параметры.Добавить("/ConfigurationRepositorySetLabel ");
  
    Параметры.Добавить(СтрШаблон("-name ""%1""", Метка));
   
    МассивСтрок = СтрРазделить(Комментарий, Символы.ПС);

    Для Каждого СтрокаКомментария Из МассивСтрок Цикл

       Параметры.Добавить(СтрШаблон("-comment ""%1""", СтрокаКомментария));
   
    КонецЦикла;

    Если Не ПустаяСтрока(Версия) Тогда
        Параметры.Добавить("-v " + Версия);
    КонецЕсли;	
	
   
    ВыполнитьКоманду(Параметры);
    
КонецПроцедуры // УстановитьМеткуДляВерсииВХранилище()


// Выполняет подключение ранее неподключенной информационной базы к хранилищу конфигурации.
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищю конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищю конфигурации
//  ИгнорироватьНаличиеПодключеннойБД  - Булево - Флаг игнорирования наличия уже у пользователя уже подключенной базы данных. По умолчанию = Ложь
//								 	 Выполняет подключение даже в том случае, если для данного пользователя уже есть конфигурация, связанная с данным хранилищем..
//  ЗаменитьКонфигурациюБД - Булево - Флаг замены конфигурации БД на конфигурацию хранилища  (По умолчанию Истина)
//									 Если конфигурация непустая, данный ключ подтверждает замену конфигурации на конфигурацию из хранилища.
//
Процедура ПодключитьсяКХранилищу(Знач СтрокаСоединения, 
                                    Знач ПользовательХранилища,
                                    Знач ПарольХранилища = "",
                                    Знач ИгнорироватьНаличиеПодключеннойБД = Ложь,
                                    Знач ЗаменитьКонфигурациюБД = Истина,
                                   	) Экспорт
    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения+"""");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");
    
    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
    КонецЕсли;	

    Параметры.Добавить("/ConfigurationRepositoryBindCfg ");
  
    Если ИгнорироватьНаличиеПодключеннойБД Тогда
        Параметры.Добавить("-forceBindAlreadyBindedUser ");
    КонецЕсли;
    Если ЗаменитьКонфигурациюБД Тогда
        Параметры.Добавить("-forceReplaceCfg ");
    КонецЕсли;		
	
	ВыполнитьКоманду(Параметры);
КонецПроцедуры

Процедура ОтключитьсяОтХранилища() Экспорт
	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/ConfigurationRepositoryUnbindCfg -force ");

	ВыполнитьКоманду(Параметры);
КонецПроцедуры


// Добавление пользователя хранилища конфигурации. 
//	Пользователь, от имени которого выполняется подключение к хранилищу, должен обладать административными правами. 
//	Если пользователь с указанным именем существует, то пользователь добавлен не будет.
// Параметры:
//   СтрокаСоединения - Строка - Строка соединения с хранилищем конфигурации
//   ПользовательХранилища - строка - Пользователь для подключения к хранилищю конфигурации
//   ПарольХранилища - Строка - Пароль пользователь для подключения к хранилищю конфигурации
//   НовыйПользователь - Строка - Имя создаваемого пользователя.
//   ПарольПользователя - Строка - Пароль создаваемого пользователя.
//   Право - ПраваПользователяХранилища - Права пользователя. Возможные значения:
// 		ТолькоЧтение — право на просмотр, (по умолчанию)
// 		ПравоЗахватаОбъектов — право на захват объектов,
// 		ПравоИзмененияВерсий — право на изменение состава версий,
// 		Администрирование — право на административные функции.
// 	 ВосстановитьУдаленного - Булево - флаг небходимости востановления удаленного пользователя
//								       Если обнаружен удаленный пользователь с таким же именем, он будет восстановлен.
//  		 
Процедура ДобавитьПользователяВХранилище(Знач СтрокаСоединения, 
                                        Знач ПользовательХранилища, 
                                        Знач ПарольХранилища,
                                        Знач НовыйПользователь,
                                        Знач ПарольПользователя = "",
                                        Знач Право = Неопределено,
                                        Знач ВосстановитьУдаленного = Ложь) Экспорт
    
    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения+"""");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");
    
    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
    КонецЕсли;	
	
    Параметры.Добавить("/ConfigurationRepositoryAddUser ");
    Параметры.Добавить(СтрШаблон("-User ""%1""",НовыйПользователь));
    Если Не ПустаяСтрока(ПарольПользователя) Тогда
    	Параметры.Добавить(СтрШаблон("-Pwd ""%1""",ПарольПользователя));
    КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Право) ТОгда
		Право = ПраваПользователяХранилища.ТолькоЧтение;
	КонецЕсли;

    Параметры.Добавить(СтрШаблон("-Rights %1",Право));

    Если ВосстановитьУдаленного Тогда
        Параметры.Добавить("-RestoreDeletedUser");
    КонецЕсли;	

    ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Копирование пользователей из хранилища конфигурации. Копирование удаленных пользователей не выполняется. 
//   Если пользователь с указанным именем существует, то пользователь не будет добавлен.
// 
//Параметры:
//   СтрокаСоединения - Строка - Строка соединения с хранилищем конфигурации
//   ПользовательХранилища - строка - Пользователь для подключения к хранилищю конфигурации
//   ПарольХранилища - Строка - Пароль пользователь для подключения к хранилищю конфигурации
//   СтрокаСоединенияХранилищаКопии - Строка - Путь к хранилищу, из которого выполняется копирование пользователей.
//   ПользовательХранилищаКопии - Строка - Имя пользователя хранилища, из которого выполняется копирование пользователей.
//   ПарольХранилищаКопии - Строка - Пароль пользователя хранилища, из которого выполняется копирование пользователей.
//   ВосстановитьУдаленного - Булево - флаг небходимости востановления удаленных пользователей
//		 
Процедура КопироватьПользователейИзХранилища(Знач СтрокаСоединения, 
                                        Знач ПользовательХранилища, 
                                        Знач ПарольХранилища,
                                        Знач СтрокаСоединенияХранилищаКопии,
                                        Знач ПользовательХранилищаКопии,
                                        Знач ПарольХранилищаКопии = "",
                                        Знач ВосстановитьУдаленного = Ложь) Экспорт
    
    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения+"""");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");
    
    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
    КонецЕсли;	

    Параметры.Добавить("/ConfigurationRepositoryCopyUsers ");
    Параметры.Добавить(СтрШаблон("-Path ""%1""",СтрокаСоединенияХранилищаКопии));
    Параметры.Добавить(СтрШаблон("-User ""%1""",ПользовательХранилищаКопии));
    Если Не ПустаяСтрока(ПарольХранилищаКопии) Тогда
    	Параметры.Добавить(СтрШаблон("-Pwd ""%1""",ПарольХранилищаКопии));
    КонецЕсли;	
 
    Если ВосстановитьУдаленного Тогда
        Параметры.Добавить("-RestoreDeletedUser");
    КонецЕсли;	

    ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Выполняет загрузку конфигурации из хранилища конфигурации определенной версии.
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищю конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищю конфигурации
//  НомерВерсии  		  - Число -  Номер версии в истории в хранилище конфигурации
//
Процедура ОбновитьКонфигурациюБазыДанныхИзХранилищаНаВерсию(Знач СтрокаСоединения, Знач ПользовательХранилища, Знач ПарольХранилища, Знач НомерВерсии)
	

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

	Параметры.Добавить("/ConfigurationRepositoryUpdateCfg");
	Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения+"""");
	
	Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");
	
	Если Не ПустаяСтрока(ПарольХранилища) Тогда
		Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
	КонецЕсли;

	Параметры.Добавить("-v "+НомерВерсии);
	
	Параметры.Добавить("-force");

	ВыполнитьКоманду(Параметры);

КонецПроцедуры


// Выгрузка конфигурации в файлы
// 
// Параметры:
//   КаталогВыгрузки    - Строка - Путь к каталогу,  в который будет выгружена конфигурация;
//   ФорматВыгрузки     - РежимВыгрузкиКонфигурации - По умолчанию выгрузка производится в иерархическом формате:
//   ТолькоИзмененные   - Булево - указывает, что выгрузка будет обновлена (будут выгружены только файлы, версии которых отличаются от ранее выгруженных).
//                                 Файл версий (ConfigDumpInfo.xml) будет получен из текущего каталога выгрузки. 
//	                               По завершении выгрузки файл версий обновляется 
//   ПутьКФайлуИзменений - Строка - Указывает путь к файлу,в который будут выведены изменения текущей конфигурации. Изменения вычисляются относительно файла версий в текущем каталоге выгрузки.
//   ПутьКФайлуВерсийДляСравнения - Строка - Указывает путь к файлу, который будет использован для сравнения изменений.
//
//   Для того чтобы работали функции 8.3.10. необходимо явно указать версию	 
Процедура ВыгрузитьКонфигурациюВФайлы(Знач КаталогВыгрузки, Знач ФорматВыгрузки = "", Знач ТолькоИзмененные = Ложь, Знач ПутьКФайлуВерсийДляСравнения = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФорматВыгрузки) Тогда
		ФорматВыгрузки = РежимВыгрузкиКонфигурации.Иерархический;
	КонецЕсли;
	
	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить(СтрШаблон("/DumpConfigToFiles %1", ОбернутьВКавычки(КаталогВыгрузки)));
	Параметры.Добавить(СтрШаблон("-format %1", ФорматВыгрузки));
   
	
	Если ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.10") Тогда

		Если ТолькоИзмененные Тогда

			Если ПроверитьВозможностьОбновленияФайловВыгрузки(КаталогВыгрузки, ПутьКФайлуВерсийДляСравнения, ФорматВыгрузки) Тогда

				Параметры.Добавить("-update");
				
				Параметры.Добавить("-force");
				
				Если ЗначениеЗаполнено(ПутьКФайлуВерсийДляСравнения) Тогда
				
					Параметры.Добавить(СтрШаблон("-configDumpInfoForChanges %1", ОбернутьВКавычки(ПутьКФайлуВерсийДляСравнения)));
				
				КонецЕсли;

			Иначе

				ОчиститьЦелевойКаталогВыгрузки(КаталогВыгрузки);

			КонецЕсли;

		КонецЕсли;

	КонецЕслИ;
	
	ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Выгрузка изменений в файлах конфигурации в файл
// 
// Параметры:
//   КаталогВыгрузки 	- Строка - Путь к каталогу, в который была выгружена конфигурация;
//   ПутьКФайлуИзменений - Строка - Указывает путь к файлу,в который будут выведены изменения текущей конфигурации. Изменения вычисляются относительно файла версий в текущем каталоге выгрузки.
//   ПутьКФайлуВерсийДляСравнения - Строка - Указывает путь к файлу, который будет использован для сравнения изменений.
//   ФорматВыгрузки 	- РежимВыгрузкиКонфигурации - По умолчанию выгрузка производится в иерархическом формате.
//
//   Для того чтобы работали функции 8.3.10. необходимо явно указать версию	 
Процедура ВыгрузитьИзмененияКонфигурацииВФайл(Знач КаталогВыгрузки, Знач ПутьКФайлуИзменений, Знач ПутьКФайлуВерсийДляСравнения = "", Знач ФорматВыгрузки = "") Экспорт
	
	Ожидаем.Что(ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.10"), "Данная процедура не поддерживается выбранной версией платформы")
		.ЭтоИстина();

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить(СтрШаблон("/DumpConfigToFiles %1", ОбернутьВКавычки(КаталогВыгрузки)));
	Параметры.Добавить(СтрШаблон("-getChanges %1", ОбернутьВКавычки(ПутьКФайлуИзменений)));
	

	Если ЗначениеЗаполнено(ПутьКФайлуВерсийДляСравнения) Тогда

		Параметры.Добавить(СтрШаблон("-configDumpInfoForChanges %1", ОбернутьВКавычки(ПутьКФайлуВерсийДляСравнения)));

	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ФорматВыгрузки) Тогда
		ФорматВыгрузки = РежимВыгрузкиКонфигурации.Иерархический;
	КонецЕсли;
	
	Параметры.Добавить(СтрШаблон("-format %1", ФорматВыгрузки));
   
	ВыполнитьКоманду(Параметры);
КонецПроцедуры

// Загрузка конфигурации из файлов
// 
//Параметры:
//   КаталогЗагрузки 	- Строка - Путь к каталогу, содержащий XML-файлы конфигурации;
//   ПутьКСпискуФайловЗагрузки - Строка - Указывает путь к файлу, в котором перечислены файлы, которые требуется загрузить. При запуске в режиме агента путь к загружаемым файлам должен быть относительным.
//											Указываемый файл должен удовлетворять следующим требованиям:
//											- Файл должен быть в кодировке UTF-8.
//											- Имена файлов должны быть указаны через перенос (поддерживаются символы переноса \r\n ("следующая строка") и \r ("возврат каретки")).
//											- Файл не должен содержать пустые строки между именами файлов.  
//   ФорматВыгрузки 	- РежимВыгрузкиКонфигурации - Используется для частичной загрузки (при передаче параметра ПутьКСпискуФайловЗагрузки).
//												 Указывает формат загрузки файлов. По умолчанию загрузка производится в иерархическом формате:
//   ОбновитьФайлВерсий - Булево - указывает, что в конце загрузки в каталоге будет создан файл версий ConfigDumpInfo.xml, 
//									соответствующий загруженной конфигурации. 
//									Если выполняется частичная загрузка (используется опция -files или -listFile), файл версий будет обновлен.
//   Для того чтобы работали функции 8.3.10. необходимо явно указать версию	 
Процедура ЗагрузитьКонфигурациюИзФайлов(Знач КаталогЗагрузки, Знач ПутьКСпискуФайловЗагрузки = "", Знач ФорматВыгрузки = "", Знач ОбновитьФайлВерсий = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФорматВыгрузки) Тогда
		ФорматВыгрузки = РежимВыгрузкиКонфигурации.Иерархический;
	КонецЕсли;
	
	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить(СтрШаблон("/LoadConfigFromFiles %1", ОбернутьВКавычки(КаталогЗагрузки)));
	
	Если ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.10") Тогда

		Если ОбновитьФайлВерсий Тогда

			Параметры.Добавить("-updateConfigDumpInfo");
   		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПутьКСпискуФайловЗагрузки) Тогда
			
			Параметры.Добавить(СтрШаблон("-listFile %1", ОбернутьВКавычки(ПутьКСпискуФайловЗагрузки)));
			Параметры.Добавить(СтрШаблон("-format %1", ФорматВыгрузки));
   
		КонецЕсли;

	КонецЕслИ;
	
	
	ВыполнитьКоманду(Параметры);
	
КонецПроцедуры

Процедура ЗагрузитьКонфигурациюИзФайла(Знач ФайлКонфигурации, Знач ОбновитьКонфигурациюИБ = Ложь) Экспорт

	// Выполняем загрузку и обновление за два шага, т.к.
	// иногда обновление конфигурации ИБ на новой базе проходит неудачно,
	// если запустить две операции в одной команде.

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/LoadCfg """ + ФайлКонфигурации + """");
	ВыполнитьКоманду(Параметры);

	Если ОбновитьКонфигурациюИБ Тогда
		ОбновитьКонфигурациюБазыДанных(Ложь, Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьКонфигурациюВФайл(Знач ФайлКонфигурации) Экспорт
	
	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/DumpCfg """ + ФайлКонфигурации + """");
	ВыполнитьКоманду(Параметры);
	
КонецПроцедуры

// Выполнить объединение текущей конфигурации с файлом (с использованием файла настроек)
// Описание ИТС: http://its.1c.ru/db/v83doc#bookmark:adm:TI000000527
//
// Параметры:
//   ФайлКонфигурации - Строка - имя cf-файла с объединяемой конфигурацией.
//   ФайлНастроек - Строка - имя файла с настройками объединения конфигураций.
//   ПоставитьНаПоддержку - Булево, Неопределено - флаг необходимости установки конфигурации на поддержку.
//		Неопределено: по умолчанию флаг не передается.
//		Истина: конфигурация ставится на поддержку, если есть такая возможность.
//		Ложь: конфигурация не ставится на поддержку, даже если есть такая вожзможность.
//   ВключитьВОбъединениеОбъектыПоНеразрешеннымСсылкам - Булево, Неопределено - флаг небходимости включения
//		в объединение объектов, не включенных в список объединяемых и отсутствующих в основной конфигурации.
//		Неопределено: по умолчанию флаг не передается.
//		Истина: включать объекты с неразрешенными ссылками в список объединяемых.
//		Ложь: очищать ссылки на объекты с неразрешенными ссылками.
//   Принудительно - Булево - флаг принудительного обновления.
//		Обновление будет производиться в случае наличия:
//			предупреждений об удаляемых объектов, на которые есть ссылки в объектах, 
//				не участвующих в объединении (такие объекты будут исключены из объединения);
//			предупреждений о применении настроек.
//		Если не указан, то объединение будет прервано в вышеуказанных случаях.
//
Процедура ОбъединитьКонфигурациюСФайлом(Знач ФайлКонфигурации, 
								 Знач ФайлНастроек, 
								 Знач ПоставитьНаПоддержку = Неопределено, 
								 Знач ВключитьВОбъединениеОбъектыПоНеразрешеннымСсылкам = Неопределено, 
								 Знач Принудительно = Ложь) Экспорт
	
	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/MergeCfg " + ОбернутьВКавычки(ФайлКонфигурации));
	Параметры.Добавить("-Settings " + ОбернутьВКавычки(ФайлНастроек));

	Если ПоставитьНаПоддержку = Истина Тогда
		Параметры.Добавить("-EnableSupport");
	ИначеЕсли ПоставитьНаПоддержку = Ложь Тогда
		Параметры.Добавить("-DisableSupport");
	КонецЕсли;

	Если ВключитьВОбъединениеОбъектыПоНеразрешеннымСсылкам = Истина Тогда
		Параметры.Добавить("-IncludeObjectsByUnresolvedRefs");
	ИначеЕсли ВключитьВОбъединениеОбъектыПоНеразрешеннымСсылкам = Ложь Тогда
		Параметры.Добавить("-ClearUnresolvedRefs");
	КонецЕсли;

	Если Принудительно Тогда
		Параметры.Добавить("-force");
	КонецЕсли;

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

Процедура ОбновитьКонфигурациюБазыДанных(
	ПредупрежденияКакОшибки = Ложь, НаСервере = Истина, 
	ДинамическоеОбновление = Ложь,
	ИмяРасширения = "") Экспорт

	ПараметрыСвязиСБазой = СтандартныеПараметрыЗапускаКонфигуратора();
	ПараметрыСвязиСБазой.Добавить("/UpdateDBCfg");
	Если Не ДинамическоеОбновление Тогда
		ПараметрыСвязиСБазой.Добавить("-Dynamic-");
	КонецЕсли;
	
	Если ПредупрежденияКакОшибки Тогда
		ПараметрыСвязиСБазой.Добавить("-WarningsAsErrors");
	КонецЕсли;
	Если НаСервере Тогда
		ПараметрыСвязиСБазой.Добавить("-Server");
	КонецЕсли;
	Если ИмяРасширения <> "" Тогда
		ПараметрыСвязиСБазой.Добавить("-Extension " + ИмяРасширения);
	КонецЕсли;

	ВыполнитьКоманду(ПараметрыСвязиСБазой);

КонецПроцедуры

Процедура ОбновитьКонфигурацию(Знач КаталогВерсии, Знач ИспользоватьПолныйДистрибутив = Ложь) Экспорт

	ПараметрыЗапуска = СтандартныеПараметрыЗапускаКонфигуратора();

	Если ИспользоватьПолныйДистрибутив = Неопределено Тогда
		ИспользоватьПолныйДистрибутив = Не КаталогСодержитФайлОбновления(КаталогВерсии);
	КонецЕсли;

	Если ИспользоватьПолныйДистрибутив Тогда
		ФайлОбновления = "1cv8.cf";
	Иначе
		ФайлОбновления = "1cv8.cfu";
	КонецЕсли;

	ПараметрыЗапуска.Добавить("/UpdateCfg " + ОбернутьВКавычки(ОбъединитьПути(КаталогВерсии, ФайлОбновления)));

	ВыполнитьКоманду(ПараметрыЗапуска);

КонецПроцедуры

Процедура СнятьКонфигурациюСПоддержки(Знач Принудительно = Ложь) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/ManageCfgSupport -disableSupport");
	Если Принудительно Тогда
		Параметры.Добавить("-force");
	КонецЕсли;

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

Процедура СконвертироватьФайлКонфигурации(Знач ФайлКонфигурации) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/ConvertFiles """ + ФайлКонфигурации + """");
	ВыполнитьКоманду(Параметры);

КонецПроцедуры

Процедура СоздатьФайловуюБазу(Знач КаталогБазы, Знач ПутьКШаблону="", Знач ИмяБазыВСписке="") Экспорт

	Лог.Отладка("Создаю файловую базу "+КаталогБазы);

	ОбеспечитьКаталог(КаталогБазы);
	УдалитьФайлы(КаталогБазы, "*.*");

	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить("CREATEINFOBASE");
	ПараметрыЗапуска.Добавить("File="""+КаталогБазы+"""");
	Если мОчищатьФайлИнформации Тогда
		ПараметрыЗапуска.Добавить("/Out " + ОбернутьВКавычки(ФайлИнформации()));
	Иначе
		ПараметрыЗапуска.Добавить("/Out " + ОбернутьВКавычки(ФайлИнформации()) + " -NoTruncate");
	КонецЕсли;
	
	Если ИмяБазыВСписке <> "" Тогда
        ПараметрыЗапуска.Добавить("/AddInList"""+ ИмяБазыВСписке + """");
    КонецЕсли;
	Если ПутьКШаблону<> "" Тогда
        ПараметрыЗапуска.Добавить("/UseTemplate"""+ ПутьКШаблону + """");
    КонецЕсли;

	Если НЕ ПустаяСтрока(мКонтекстКоманды.КодЯзыка) Тогда
		ПараметрыЗапуска.Добавить("/L"+мКонтекстКоманды.КодЯзыка);
	КонецЕсли;
	Если НЕ ПустаяСтрока(мКонтекстКоманды.КодЯзыкаСеанса) Тогда
		ПараметрыЗапуска.Добавить("/VL"+мКонтекстКоманды.КодЯзыкаСеанса);
	КонецЕсли;

	СохранитьТекстФайлаИнформации();

	КодВозврата = ЗапуститьИПодождать(ПараметрыЗапуска);

	УстановитьВывод(ПрочитатьФайлИнформации());

	Если КодВозврата <> 0 Тогда
		ВызватьИсключение ВыводКоманды();
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьИнформационнуюБазу(ПутьВыгрузкиИБ) Экспорт
	ФайлВыгрузки = Новый Файл(ПутьВыгрузкиИБ);
	Ожидаем.Что(ФайлВыгрузки.Существует(), "Файл выгрузки <"+ПутьВыгрузкиИБ+"> существует, а это не так").ЭтоИстина();

	ПараметрыЗапуска = СтандартныеПараметрыЗапускаКонфигуратора();

	ПараметрыЗапуска.Добавить("/RestoreIB " + ОбернутьВКавычки(ПутьВыгрузкиИБ));

	ВыполнитьКоманду(ПараметрыЗапуска);
КонецПроцедуры

Процедура ВыгрузитьИнформационнуюБазу(ПутьВыгрузкиИБ) Экспорт

	Файл = Новый Файл(ПутьВыгрузкиИБ);
	КаталогВыгрузкиИБ = Файл.Путь;

	ОбеспечитьКаталог(КаталогВыгрузкиИБ);

	ПараметрыЗапуска = СтандартныеПараметрыЗапускаКонфигуратора();

	ПараметрыЗапуска.Добавить("/DumpIB " + ОбернутьВКавычки(ПутьВыгрузкиИБ));

	ВыполнитьКоманду(ПараметрыЗапуска);

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Параметры) Экспорт

	ПроверитьВозможностьВыполненияКоманды();

	СохранитьТекстФайлаИнформации();

	КодВозврата = ЗапуститьИПодождать(Параметры);

	УстановитьВывод(ПрочитатьФайлИнформации());
	
	Если КодВозврата <> 0 Тогда
		Лог.Ошибка("Получен ненулевой код возврата "+КодВозврата+". Выполнение скрипта остановлено!");
		ВызватьИсключение ВыводКоманды();
	Иначе
		Лог.Отладка("Код возврата равен 0");
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПараметрыЗапуска() Экспорт
	Возврат СтандартныеПараметрыЗапускаКонфигуратора();
КонецФункции

Процедура ВыполнитьРасширеннуюПроверкуКонфигуратора(Ключи) Экспорт
    
	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	
	Параметры.Добавить("/CheckConfig");
	
	Для Каждого СтрокаКлюча Из Ключи Цикл
	    Если СтрокаКлюча.Значение = Истина Тогда
		    Параметры.Добавить(СтрокаКлюча.Ключ);
		КонецЕсли;
	КонецЦикла; 
	
	ВыполнитьКоманду(Параметры);
	
КонецПроцедуры

Процедура ВыполнитьСинтаксическийКонтроль(
			Знач ТонкийКлиент = Истина,
			Знач ВебКлиент = Истина,
			Знач Сервер = Истина,
			Знач ВнешнееСоединение = Истина,
			Знач ТолстыйКлиентОбычноеПриложение = Истина) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

	Параметры.Добавить("/CheckConfig");

	ДобавитьФлагПроверки(Параметры, ТонкийКлиент, "-ThinClient");
	ДобавитьФлагПроверки(Параметры, ВебКлиент, "-WebClient");
	ДобавитьФлагПроверки(Параметры, Сервер, "-Server");
	ДобавитьФлагПроверки(Параметры, ВнешнееСоединение, "-ExternalConnection");
	ДобавитьФлагПроверки(Параметры, ТолстыйКлиентОбычноеПриложение, "-ThickClientOrdinaryApplication");

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

Процедура ЗапуститьВРежимеПредприятия(Знач КлючЗапуска = "", Знач УправляемыйРежим = Неопределено, Знач ДополнительныеКлючи = Неопределено) Экспорт
	ПараметрыСвязиСБазой = ПолучитьПараметрыЗапуска();
	ПараметрыСвязиСБазой[0] = "ENTERPRISE";
	Если Не ПустаяСтрока(КлючЗапуска) Тогда
		ПараметрыСвязиСБазой.Добавить("/C"+КлючЗапуска);
	КонецЕсли;
	Если УправляемыйРежим = Истина Тогда
		ПараметрыСвязиСБазой.Вставить(2, "/RunModeManagedApplication");
	ИначеЕсли УправляемыйРежим = Ложь Тогда
		ПараметрыСвязиСБазой.Вставить(2, "/RunModeOrdinaryApplication");
	КонецЕсли;

	Если ДополнительныеКлючи <> Неопределено Тогда
		ПараметрыСвязиСБазой.Добавить(ДополнительныеКлючи);
	КонецЕсли;

	ВыполнитьКоманду(ПараметрыСвязиСБазой);

КонецПроцедуры

Процедура ДобавитьФлагПроверки(Знач Параметры, Знач ФлагПроверки, Знач ИмяФлага)

	Если ФлагПроверки Тогда
		Параметры.Добавить(ИмяФлага);
	КонецЕсли;

КонецПроцедуры

Функция КаталогСодержитФайлОбновления(Знач КаталогВерсии)

	ФайлОбновления = Новый Файл(ОбъединитьПути(КаталогВерсии, "1cv8.cfu"));
	Возврат ФайлОбновления.Существует();

КонецФункции

Функция ПутьКВременнойБазе() Экспорт
	Возврат ОбъединитьПути(КаталогСборки(), "v8r_TempDB");
КонецФункции

//////////////////////////////////////////////////
// Вспомогательные и настроечные функции

Функция ПолучитьПутьКВерсииПлатформы(Знач ВерсияПлатформы) Экспорт

	Если Лев(ВерсияПлатформы, 2) <> "8." Тогда
		ВызватьИсключение "Неверная версия платформы <"+ВерсияПлатформы+">";
	КонецЕсли;
	
	Если ЭтоWindows = Истина Тогда
	
		СписокСтрок = РазложитьСтрокуВМассивПодстрок(ВерсияПлатформы, ".");
		Если СписокСтрок.Количество() < 2 Тогда
			ВызватьИсключение "Маска версии платформы должна содержать, как минимум, минорную и мажорную версию, т.е. Maj.Min[.Release][.Build]";
		КонецЕсли;
		
		КаталогиУстановкиПлатформы = СобратьВозможныеКаталогиУстановкиПлатформыWindows();
		
		Если КаталогиУстановкиПлатформы.Количество() = 0 Тогда
			Лог.Отладка("В конфигах стартера не найдены пути установки. Пробую стандартные пути наугад.");
			файлProgramFiles = Новый Файл("C:\Program Files (x86)\");
			Если Не файлProgramFiles.Существует() Тогда
				файлProgramFiles = Новый Файл("C:\Program Files\");
				Если Не файлProgramFiles.Существует() Тогда
					ВызватьИсключение "Не обнаружено установленных версий платформы 1С";
				КонецЕсли;
			КонецЕсли;
			
			КаталогиУстановкиПлатформы.Добавить(ОбъединитьПути(файлProgramFiles.ПолноеИмя, "1Cv8"));
			КаталогиУстановкиПлатформы.Добавить(ОбъединитьПути(файлProgramFiles.ПолноеИмя, "1Cv82"));
			
		КонецЕсли;
		
		МассивКаталогов1С = Новый Массив;
		Для Каждого ВозможныйПуть Из КаталогиУстановкиПлатформы Цикл
		
			Лог.Отладка("Выполняю попытку поиска версии в каталоге " + ВозможныйПуть);
			
			МассивФайлов = НайтиФайлы(ВозможныйПуть, ВерсияПлатформы+"*");
			Если МассивФайлов.Количество() = 0 Тогда
				Лог.Отладка("Не найдено ни одного каталога с версией в %1", ВозможныйПуть);
				Продолжить;
			КонецЕсли;
			Если МассивКаталогов1С = Неопределено Тогда
				МассивКаталогов1С = МассивФайлов;
			Иначе
				Для каждого Подкаталог1С Из МассивФайлов Цикл
					Файл1cv8 = Новый Файл(ОбъединитьПути(Подкаталог1С.ПолноеИмя, "bin", "1cv8.exe"));
					Если Файл1cv8.Существует() Тогда
						ОписаниеКаталога = Новый Структура("Версия, ФайлКлиента1С", Подкаталог1С.Имя, Файл1cv8);
						МассивКаталогов1С.Добавить(ОписаниеКаталога);
						Лог.Отладка("Нашел платформу 1С %1", Подкаталог1С.Имя);
					Иначе
						Лог.Отладка("Пропускаю каталог 1С %1", Подкаталог1С.Имя);
					КонецЕсли;	 
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		НужныйФайлПлатформы = Неопределено;

		МассивКаталоговВерсий = Новый Массив;
		Для Каждого ОписаниеКаталога Из МассивКаталогов1С Цикл
			правыйСимвол = Прав(ОписаниеКаталога.Версия, 1);
			Если правыйСимвол < "0" или правыйСимвол > "9" Тогда
				Продолжить;
			КонецЕсли;
			МассивКаталоговВерсий.Добавить(ОписаниеКаталога);
		КонецЦикла;

		Если МассивКаталоговВерсий.Количество() > 0 Тогда
			ОписаниеМаксВерсии = МассивКаталоговВерсий[0];
			Для Сч = 1 По МассивКаталоговВерсий.ВГраница() Цикл
				Если СтроковыеФункции.СравнитьВерсии(МассивКаталоговВерсий[Сч].Версия, ОписаниеМаксВерсии.Версия) > 0 Тогда
					ОписаниеМаксВерсии = МассивКаталоговВерсий[Сч];
				КонецЕсли;	 
  			КонецЦикла;
			НужныйФайлПлатформы = ОписаниеМаксВерсии.ФайлКлиента1С;
			мВерсияПлатформы = ОписаниеМаксВерсии.Версия;
			Лог.Отладка("Версия найдена: " + НужныйФайлПлатформы.ПолноеИмя);
	
		КонецЕсли;
		
		Если НужныйФайлПлатформы = Неопределено Тогда
			ВызватьИсключение "Не найден путь к платформе 1С <"+ВерсияПлатформы+">";
		КонецЕсли;

	Иначе
		// help wanted: на Линукс конфиг стартера лежит в ~/.1C/1cestart.
		КорневойПуть1С = ОбъединитьПути("/opt", "1C", "v8.3");
		КаталогУстановки = Новый Файл(ОбъединитьПути(КорневойПуть1С, "i386"));
		Если НЕ КаталогУстановки.Существует() Тогда
			КаталогУстановки = Новый Файл(ОбъединитьПути(КорневойПуть1С, "x86_64"));
		КонецЕсли;
		//Определим версию приложения
		ФайлРАК = Новый Файл(ОбъединитьПути(КаталогУстановки.ПолноеИмя, "rac"));
		Если ФайлРАК.Существует() Тогда
			Команда = Новый Команда;
			СтрокаЗапуска = ФайлРАК.ПолноеИмя + " -v ";
			Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);
			Команда.УстановитьПравильныйКодВозврата(0);
			Попытка
				Команда.Исполнить();
				мВерсияПлатформы = СокрЛП(Команда.ПолучитьВывод());
			Исключение
				Лог.Предупреждение("Не удалось прочитать версию 1С %1, %2.
				|" + ОписаниеОшибки(), ВерсияПлатформы, СтрокаЗапуска);
			КонецПопытки;
		КонецЕсли;
		НужныйФайлПлатформы = Новый Файл(ОбъединитьПути(КаталогУстановки.ПолноеИмя, "1cv8"));
	КонецЕсли;
	
	Если Не НужныйФайлПлатформы.Существует() Тогда
		ВызватьИсключение "Ошибка определения версии платформы. Файл <"+НужныйФайлПлатформы.ПолноеИмя+"> не существует";
	КонецЕсли;

	Возврат НужныйФайлПлатформы.ПолноеИмя;

КонецФункции

Процедура УстановитьКлючРазрешенияЗапуска(Знач Ключ) Экспорт
	мКонтекстКоманды.КлючРазрешенияЗапуска = Ключ;
КонецПроцедуры

Процедура УстановитьКодЯзыка(Знач Код) Экспорт
	мКонтекстКоманды.КодЯзыка = Код;
	Если ПустаяСтрока(мКонтекстКоманды.КодЯзыкаСеанса) Тогда 
		мКонтекстКоманды.КодЯзыкаСеанса = Код;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьКодЯзыкаСеанса(Знач Код) Экспорт
	мКонтекстКоманды.КодЯзыкаСеанса = Код;
КонецПроцедуры

Функция ВыводКоманды() Экспорт
	Возврат мВыводКоманды;
КонецФункции

Функция КаталогСборки(Знач Каталог = "") Экспорт

	Если мКаталогСборки = Неопределено Тогда
		мКаталогСборки = ТекущийКаталог();
	КонецЕсли;

	Если Каталог = "" Тогда
		Возврат мКаталогСборки;
	Иначе
		ТекКаталог = мКаталогСборки;
		мКаталогСборки = Каталог;
		Возврат ТекКаталог;
	КонецЕсли;

КонецФункции

Функция ПутьКПлатформе1С(Знач Путь = "") Экспорт

	Если Путь = "" Тогда
		Возврат мПутьКПлатформе1С;
	Иначе
		ФайлПлатформы = Новый Файл(Путь);
		Если Не ФайлПлатформы.Существует() Тогда
			ВызватьИсключение "Нельзя установить несуществующий путь к платформе: " + ФайлПлатформы.ПолноеИмя;
		КонецЕсли;

		ТекЗначение = мПутьКПлатформе1С;
		мПутьКПлатформе1С = Путь;
		Возврат ТекЗначение;
	КонецЕсли;

КонецФункции

Процедура ИспользоватьВерсиюПлатформы(Знач МаскаВерсии) Экспорт
	Путь = ПолучитьПутьКВерсииПлатформы(МаскаВерсии);
	ПутьКПлатформе1С(Путь);
КонецПроцедуры

Функция ПутьКТонкомуКлиенту1С(Знач ПутьКПлатформе1С = "") Экспорт
	Лог.Отладка("ПутьКТонкомуКлиенту1С: Путь платформы 1С <"+ПутьКПлатформе1С+">");
	Если ПутьКПлатформе1С = "" Тогда
		ПутьКПлатформе1С = ПутьКПлатформе1С();
		Лог.Отладка("ПутьКТонкомуКлиенту1С: вычислили Путь платформы 1С <"+ПутьКПлатформе1С+">");
	КонецЕсли;

	ФайлПриложения = Новый Файл(ПутьКПлатформе1С);
	Каталог = ФайлПриложения.Путь;
	ИмяФайлаТонкогоКлиента = ?(ЭтоWindows=Истина, "1cv8c.exe", "1cv8c");
	ФайлПриложения = Новый Файл(ОбъединитьПути(Каталог, ИмяФайлаТонкогоКлиента));
	Если Не ФайлПриложения.Существует() Тогда
		ВызватьИсключение "Не установлен тонкий клиент";
	КонецЕсли;

	Лог.Отладка("ПутьКТонкомуКлиенту1С: получили путь к тонкому клиенту 1С <"+ФайлПриложения.ПолноеИмя+">");
	Возврат ФайлПриложения.ПолноеИмя;

КонецФункции

//  Установка файла для вывода служебных сообщений. Если задан параметр ОчищатьФайл=Ложь, файл не очищается.
//
// Параметры:
//  ПолныйПутьКФайлу - Строка - Полный путь к файлу, например, g:\temp\1c.log
//  ОчищатьФайл      - Булево - Если Истина, то перед операцией файл будет удаляться, иначе будет происходить дозапись
//
Процедура УстановитьИмяФайлаСообщенийПлатформы(Знач ПолныйПутьКФайлу, Знач ОчищатьФайл = Истина) Экспорт
	мИмяФайлаИнформации = ПолныйПутьКФайлу; // если будет абс. путь, то ОбъединитьПути отработает корректно.
	мФайлИнформацииВнешний = Истина;
	мОчищатьФайлИнформации = ОчищатьФайл;
КонецПроцедуры

Процедура УдалитьВременнуюБазу() Экспорт

	Если ВременнаяБазаСуществует() Тогда
		КаталогВременнойБазы = ПутьКВременнойБазе();
		Лог.Отладка("Удаляю временную базу: "+КаталогВременнойБазы);
		УдалитьФайлы(КаталогВременнойБазы);
	КонецЕсли;

КонецПроцедуры

// УстановитьПризнакОжиданияВыполненияПрограммы
//
// Параметры:
//   НовыйПризнак - <Булево> - <описание параметра>
//
//  Возвращаемое значение:
//   <Булево> - прежнее значение признака
//
Функция УстановитьПризнакОжиданияВыполненияПрограммы(НовыйПризнак) Экспорт

	Ожидаем.Что(НовыйПризнак = Ложь или НовыйПризнак = Истина, 
		"Параметр признак ожидания выполнения программы 1С должен быть или Истина или Ложь, а это не так").ЭтоИстина();

	мПризнакОжиданияВыполненияПрограммы = НовыйПризнак;

КонецФункции // УстановитьРежимОжиданияВыполненияПрограммы() Экспорт

Функция СобратьВозможныеКаталогиУстановкиПлатформыWindows()

	СИ = Новый СистемнаяИнформация;
		
	// Ищем в расположениях для Vista и выше.
	// Желающие поддержать пути в Windows XP - welcome
	КаталогВсеПользователи = ПолучитьПеременнуюСреды("ALLUSERSPROFILE");
	КаталогТекущегоПользователя = ПолучитьПеременнуюСреды("APPDATA");
	
	МассивПутей = Новый Массив;
	СуффиксРасположения = "1C\1CEStart\1CEStart.cfg";
	
	ОбщийКонфиг = ОбъединитьПути(КаталогВсеПользователи, СуффиксРасположения);
	ДополнитьМассивРасположенийИзКонфигурационногоФайла(ОбщийКонфиг, МассивПутей);
	
	ПользовательскийКонфиг = ОбъединитьПути(КаталогТекущегоПользователя, СуффиксРасположения);
	ДополнитьМассивРасположенийИзКонфигурационногоФайла(ПользовательскийКонфиг, МассивПутей);
	
	Возврат МассивПутей;
	
КонецФункции

Процедура ДополнитьМассивРасположенийИзКонфигурационногоФайла(Знач ИмяФайла, Знач МассивПутей)
	
	ФайлКонфига = Новый Файл(ИмяФайла);
	Если Не ФайлКонфига.Существует() Тогда
		Лог.Отладка("Конфигурационный файл " + ИмяФайла + " не найден.");
		Возврат;
	КонецЕсли;
	
	Лог.Отладка("Читаю конфигурационный файл " + ИмяФайла + ".");
	Конфиг = Новый КонфигурацияСтартера;
	Конфиг.Открыть(ИмяФайла);
	
	Значения = Конфиг.ПолучитьСписок("InstalledLocation");
	Если Значения <> Неопределено Тогда
		Для Каждого Путь Из Значения Цикл
			МассивПутей.Добавить(Путь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры

Функция СтандартныеПараметрыЗапускаКонфигуратора()

	Лог.Отладка("КлючСоединенияСБазой "+КлючСоединенияСБазой());
	Лог.Отладка("ИмяПользователя <"+мКонтекстКоманды.ИмяПользователя+">");

	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить("DESIGNER");
	ПараметрыЗапуска.Добавить(КлючСоединенияСБазой());
	
	Если мОчищатьФайлИнформации Тогда
		ПараметрыЗапуска.Добавить("/Out " + ОбернутьВКавычки(ФайлИнформации()));
	Иначе
		ПараметрыЗапуска.Добавить("/Out " + ОбернутьВКавычки(ФайлИнформации()) + " -NoTruncate");
	КонецЕсли;

	Если Не ПустаяСтрока(мКонтекстКоманды.ИмяПользователя) Тогда
		ПараметрыЗапуска.Добавить("/N" + ОбернутьВКавычки(мКонтекстКоманды.ИмяПользователя));
	КонецЕсли;
	Если Не ПустаяСтрока(мКонтекстКоманды.Пароль) Тогда
		ПараметрыЗапуска.Добавить("/P" + ОбернутьВКавычки(мКонтекстКоманды.Пароль));
	КонецЕсли;
	ПараметрыЗапуска.Добавить("/WA+");
	Если Не ПустаяСтрока(мКонтекстКоманды.КлючРазрешенияЗапуска) Тогда
		ПараметрыЗапуска.Добавить("/UC" + ОбернутьВКавычки(мКонтекстКоманды.КлючРазрешенияЗапуска));
	КонецЕсли;
	Если НЕ ПустаяСтрока(мКонтекстКоманды.КодЯзыка) Тогда
		ПараметрыЗапуска.Добавить("/L"+мКонтекстКоманды.КодЯзыка);
	КонецЕсли;
	Если НЕ ПустаяСтрока(мКонтекстКоманды.КодЯзыкаСеанса) Тогда
		ПараметрыЗапуска.Добавить("/VL"+мКонтекстКоманды.КодЯзыкаСеанса);
	КонецЕсли;
	ПараметрыЗапуска.Добавить("/DisableStartupMessages");
	ПараметрыЗапуска.Добавить("/DisableStartupDialogs");

	Возврат ПараметрыЗапуска;

КонецФункции

Процедура ПроверитьВозможностьВыполненияКоманды()

	Если Не ЗначениеЗаполнено(ПутьКПлатформе1С()) Тогда
		ВызватьИсключение "Не задан путь к платформе 1С";
	КонецЕсли;

	Лог.Отладка("Проверяю равенство КлючСоединенияСБазой() = КлючВременногоКонтекста() и Не ВременнаяБазаСуществует()");
	Лог.Отладка("КлючСоединенияСБазой() "+КлючСоединенияСБазой());
	Лог.Отладка("КлючВременногоКонтекста() "+КлючВременногоКонтекста());
	Лог.Отладка("ВременнаяБазаСуществует() "+ВременнаяБазаСуществует());

	Если КлючСоединенияСБазой() = КлючВременногоКонтекста() и Не ВременнаяБазаСуществует() Тогда
		Лог.Отладка("Равенство выполняется.");
		СоздатьВременнуюБазу();
	Иначе
		Лог.Отладка("Равенство не выполняется.");
	КонецЕсли;

КонецПроцедуры

Функция КлючСоединенияСБазой()
	Если ПустаяСтрока(мКонтекстКоманды.КлючСоединенияСБазой) Тогда
		Возврат КлючВременногоКонтекста();
	Иначе
		Возврат мКонтекстКоманды.КлючСоединенияСБазой;
	КонецЕсли;
КонецФункции

Процедура СоздатьВременнуюБазу()

	КаталогВременнойБазы = ПутьКВременнойБазе();
	Лог.Отладка("Создаю временную базу. Путь "+КаталогВременнойБазы);

	СоздатьФайловуюБазу(КаталогВременнойБазы);

КонецПроцедуры

// При запуска в режиме предприятия часто приложение GUI возвращает в оболочку ОК сразу после старта (а не после завершения)
//
// Параметры:
//   ОбъектОбработчик - Объект с экспортным методом ОбработкаОжиданияПроцесса(Отказ, Интервал)
//   Интервал - Интервал ожидания (мс) через который вызывается ОбработкаОжиданияПроцесса, если он не завершен
//
Процедура УстановитьОбработчикОжидания(Знач ОбъектОбработчик, Знач Интервал = 5000) Экспорт
	
	мОбработчикОжиданияПроцессаGUI = Новый Структура;
	мОбработчикОжиданияПроцессаGUI.Вставить("Объект", ОбъектОбработчик);
	мОбработчикОжиданияПроцессаGUI.Вставить("Интервал", Интервал);

КонецПроцедуры

Функция ЗапуститьИПодождать(Знач Параметры)

	СтрокаЗапуска = "";
	СтрокаДляЛога = "";
	Для Каждого Параметр Из Параметры Цикл

		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;

		Если Лев(Параметр,2) <> "/P" и Лев(Параметр,25) <> "/ConfigurationRepositoryP" Тогда
			СтрокаДляЛога = СтрокаДляЛога + " " + Параметр;
		КонецЕсли;

	КонецЦикла;

	КодВозврата = 0;

	Приложение = ОбернутьВКавычки(ПутьКПлатформе1С());
	Лог.Отладка(Приложение + СтрокаДляЛога);

	Если ЭтоWindows = Ложь Тогда 
		СтрокаЗапуска = "sh -c '"+Приложение + СтрокаЗапуска + "'";
	Иначе
		СтрокаЗапуска = Приложение + СтрокаЗапуска;
	КонецЕсли;
	Если мОбработчикОжиданияПроцессаGUI = Неопределено Тогда
		ЗапуститьПриложение(СтрокаЗапуска, , мПризнакОжиданияВыполненияПрограммы, КодВозврата);
	Иначе
		ЗапуститьПроцессGUI(СтрокаЗапуска, КодВозврата);
	КонецЕсли;
	Лог.Отладка("Получен код возврата %1", КодВозврата);
	Возврат КодВозврата;

КонецФункции

Процедура ЗапуститьПроцессGUI(Знач СтрокаЗапуска, КодВозврата)

	Процесс = СоздатьПроцесс(СтрокаЗапуска);
	Процесс.Запустить();

	Лог.Отладка("Стартовал процесс в режиме GUI, PID:%1", Процесс.Идентификатор);
	Приостановить(3000); // инициализация 1С

	Пока Не Процесс.Завершен Цикл

		Если мОбработчикОжиданияПроцессаGUI.Интервал > 0 Тогда
			Лог.Отладка("Пауза %1 секунд", мОбработчикОжиданияПроцессаGUI.Интервал);
			Приостановить(мОбработчикОжиданияПроцессаGUI.Интервал);
		КонецЕсли;

		Отказ = Ложь;
		Лог.Отладка("Вызов обработчика ожидания");
		Попытка
			мОбработчикОжиданияПроцессаGUI.Объект.ОбработкаОжиданияПроцесса(Отказ, мОбработчикОжиданияПроцессаGUI.Интервал);
		Исключение
			Лог.Отладка(ОписаниеОшибки());
			ВызватьИсключение;
		КонецПопытки;

		Если Отказ = Истина Тогда
			КодВозврата = -1;
			Лог.Отладка("Получен отказ");
			Возврат;
		КонецЕсли;

	КонецЦикла;

	Лог.Отладка("Процесс завершен.");
	КодВозврата = Процесс.КодВозврата;

КонецПроцедуры

Функция ПрочитатьФайлИнформации()

	Текст = "";

	Файл = Новый Файл(ФайлИнформации());
	Если Файл.Существует() Тогда
		Попытка
			Чтение = Новый ЧтениеТекста(Файл.ПолноеИмя);
		Исключение
			Лог.Предупреждение("Не удалось прочитать файл информации %1.
			|" + ОписаниеОшибки(), Файл.ПолноеИмя);
			
			Возврат "";
		КонецПопытки;
		
		Текст = Чтение.Прочитать();
		Чтение.Закрыть();

		Лог.Отладка("Это внешний файл информации: " + мФайлИнформацииВнешний );
		Лог.Отладка("Очищать файл информации: " + мОчищатьФайлИнформации );

		Если Не мФайлИнформацииВнешний
			И мОчищатьФайлИнформации Тогда
			УдалитьФайлИнформации();
		КонецЕсли;

	Иначе
		Текст = "Информации об ошибке нет";
	КонецЕсли;

	Лог.Отладка("файл информации:
	|"+Текст);
	Возврат Текст;
КонецФункции

Функция УдалитьФайлИнформации()
	
	Файл = Новый Файл(ФайлИнформации());
	Если Файл.Существует() Тогда
		Попытка
			Лог.Отладка("Удаляю файл информации 1С");
			УдалитьФайлы(Файл.ПолноеИмя);
		Исключение
			Лог.Предупреждение("Не удалось удалить файл информации: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьВывод(Знач Сообщение)
	Если мОчищатьФайлИнформации
		ИЛИ Не ЗначениеЗаполнено( мТекстФайлаДоВывода ) Тогда
		мВыводКоманды = Сообщение;
	Иначе
		мВыводКоманды = СокрЛП( СтрЗаменить( Сообщение, мТекстФайлаДоВывода, "" ));
		Лог.Отладка("Вывод при дописываемом файле: " + мВыводКоманды);
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьТекстФайлаИнформации()

	Если мОчищатьФайлИнформации Тогда
		мТекстФайлаДоВывода = "";
	Иначе
		мТекстФайлаДоВывода = ПрочитатьФайлИнформации();
	КонецЕсли;

КонецПроцедуры

Функция ФайлИнформации() Экспорт

	Если мФайлИнформацииВнешний Тогда
		Возврат мИмяФайлаИнформации;
	КонецЕсли;

	Если мИмяФайлаИнформации = Неопределено Тогда
		выделенныйВременныйФайл = ПолучитьИмяВременногоФайла("txt");
		указательНаВременныйФайл = Новый Файл(выделенныйВременныйФайл);
		мИмяФайлаИнформации = указательНаВременныйФайл.Имя;
		указательНаВременныйФайл = "";
	КонецЕсли;

	Возврат ОбъединитьПути(КаталогСборки(), мИмяФайлаИнформации);
КонецФункции

Процедура ОбеспечитьКаталог(Знач Каталог)

	Файл = Новый Файл(Каталог);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Каталог);
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		ВызватьИсключение "Каталог " + Каталог + " не является каталогом";
	КонецЕсли;

КонецПроцедуры

Функция КлючВременногоКонтекста()
	Возврат "/F""" + ПутьКВременнойБазе() + """";
КонецФункции

Функция ВременнаяБазаСуществует() Экспорт
	ФайлБазы = Новый Файл(ОбъединитьПути(ПутьКВременнойБазе(), "1Cv8.1CD"));
	
	Возврат ФайлБазы.Существует();
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(ИсходнаяСтрока, Разделитель)

	МассивПодстрок = Новый Массив;
	ОстатокСтроки = ИсходнаяСтрока;

	Поз = -1;
	Пока Поз <> 0 Цикл

		Поз = Найти(ОстатокСтроки, Разделитель);
		Если Поз > 0 Тогда
			Подстрока = Лев(ОстатокСтроки, Поз-1);
			ОстатокСтроки = Сред(ОстатокСтроки, Поз+1);
		Иначе
			Подстрока = ОстатокСтроки;
		КонецЕсли;

		МассивПодстрок.Добавить(Подстрока);

	КонецЦикла;

	Возврат МассивПодстрок;

КонецФункции

Функция ОбернутьВКавычки(Знач Строка);
	Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

Процедура Инициализация()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;

	мВерсияПлатформы = "";

	мКонтекстКоманды = Новый Структура;
	мКонтекстКоманды.Вставить("КлючСоединенияСБазой", "");
	мКонтекстКоманды.Вставить("ИмяПользователя", "");
	мКонтекстКоманды.Вставить("Пароль", "");
	мКонтекстКоманды.Вставить("КлючРазрешенияЗапуска", "");
	мКонтекстКоманды.Вставить("КодЯзыка", "");
	мКонтекстКоманды.Вставить("КодЯзыкаСеанса", "");


	ПутьКПлатформе1С(ПолучитьПутьКВерсииПлатформы("8.3"));

	мОчищатьФайлИнформации = Истина;
	мФайлИнформацииВнешний = Ложь;
	мПризнакОжиданияВыполненияПрограммы = Истина;

КонецПроцедуры

Функция СкопироватьСтруктуру(Знач Источник)

	Копия = Новый Структура;
	Для Каждого КлючИЗначение Из Источник Цикл
		Копия.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

	Возврат Копия;

КонецФункции


Процедура ПолучитьИзмененияКонфигурацииБазыДанныхИзХранилища(Знач СтрокаСоединения, Знач ПользовательХранилища, Знач ПарольХранилища="") Экспорт

	ПараметрыСвязиСБазой = СтандартныеПараметрыЗапускаКонфигуратора();
	
	ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения+"""");
	ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");
	
	Если Не ПустаяСтрока(ПарольХранилища) Тогда
		ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
	КонецЕсли;	
	
	ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryUpdateCfg");
	ПараметрыСвязиСБазой.Добавить("-force");
	
	ВыполнитьКоманду(ПараметрыСвязиСБазой);

КонецПроцедуры

Процедура ОбновитьКонфигурациюБазыДанныхИзХранилища(СтрокаСоединения, ПользовательХранилища, ПарольХранилища="") Экспорт

	ПараметрыСвязиСБазой = СтандартныеПараметрыЗапускаКонфигуратора();
	
	ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения+"""");
	ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");
	
	Если Не ПустаяСтрока(ПарольХранилища) Тогда
		ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
	КонецЕсли;	
	
	ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryUpdateCfg");
	ПараметрыСвязиСБазой.Добавить("-force");
	
	ПараметрыСвязиСБазой.Добавить("/UpdateDBCfg");
	
	ВыполнитьКоманду(ПараметрыСвязиСБазой);
КонецПроцедуры

Функция ВариантОбработкиНесуществующихСсылок() Экспорт

	Варианты = Новый Структура;
	Варианты.Вставить("СоздаватьОбъекты", 1);
	Варианты.Вставить("ОчищатьОбъекты",   2);
	Варианты.Вставить("НеИзменять",       3);

	Возврат Новый ФиксированнаяСтруктура(Варианты);

КонецФункции // ИмяФункции()

Функция ВариантОбработкиЧастичнойПотериДанных() Экспорт
	
	Варианты = Новый Структура;
	Варианты.Вставить("СоздаватьОбъекты", 1);
	Варианты.Вставить("УдалятьОбъекты",   2);

	Возврат Новый ФиксированнаяСтруктура(Варианты);

КонецФункции // ИмяФункции()

// Структура с возможными параметрами запуска ТиИ.
// По умолчанию включены все опции, нет ограничения по времени проведения тестирования.
//
// ВариантОбработкиНесуществующихСсылок:
//   - создавать объекты (по умолчанию)
//   - очищать объекты
//   - не изменять при частичной потере объектов
//
// ВариантОбработкиЧастичнойПотериДанных:
//   - создавать объекты (по умолчанию)
//   - удалять объекты
// 
Функция ПолучитьОпцииТиИ() Экспорт

	ВариантыОбработкиНесуществующихСсылок = ВариантОбработкиНесуществующихСсылок();
	ВариантыОбработкиЧастичнойПотериДанных = ВариантОбработкиЧастичнойПотериДанных();


	СтруктураОпцииТиИ = Новый Структура;
	СтруктураОпцииТиИ.Вставить("ТолькоТестирование", Истина);
	СтруктураОпцииТиИ.Вставить("Реиндексация", Истина);
	СтруктураОпцииТиИ.Вставить("ЛогическаяЦелостность", Истина);
	СтруктураОпцииТиИ.Вставить("ЛогическаяИСсылочнаяЦелостность", Истина);
	СтруктураОпцииТиИ.Вставить("ПересчетИтогов", Истина);
	СтруктураОпцииТиИ.Вставить("СжатиеТаблиц", Истина);
	СтруктураОпцииТиИ.Вставить("Реструктуризация", Истина);
	СтруктураОпцииТиИ.Вставить("ВариантОбработкиНесуществующихСсылок", ВариантыОбработкиНесуществующихСсылок.СоздаватьОбъекты);
	СтруктураОпцииТиИ.Вставить("ВариантОбработкиЧастичнойПотериДанных", ВариантыОбработкиЧастичнойПотериДанных.СоздаватьОбъекты);
	СтруктураОпцииТиИ.Вставить("ПродолжитьТиИСТочкиПрерывания", Ложь);
	СтруктураОпцииТиИ.Вставить("МаксВремяТестирования", "");
	Возврат СтруктураОпцииТиИ;

КонецФункции // ПолучитьОпцииТиИ()

// Запустить тестирование и исправление с указанными опциями.
// Функция ПолучитьОпцииТиИ вернет структуру со всеми опциями.
// По умолчанию все опции включены. Отключаются переопределением значения.
//
// Параметры:
//   Параметры - Структура - Структура с опциями запуска. Если параметр не заполнен - делается полная проверка.
//
// Пример:
//   СтрокаСоединения =  "/Fc:\work\db\fin\";
//   УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
//   УправлениеКонфигуратором.УстановитьКонтекст(СтрокаСоединения, "", "");
//   // Полная проверка
//   УправлениеКонфигуратором.ЗапуститьТестированиеИИсправление();
//
//   ОпцииТиИ = УправлениеКонфигуратором.ПолучитьОпцииТиИ();
//   // Отключить проверку логической и ссылочной целостности
//   ОпцииТиИ.Вставить("ЛогическаяИСсылочнаяЦелостность", Ложь);
//   УправлениеКонфигуратором.ЗапуститьТестированиеИИсправление(ОпцииТиИ);
//
Процедура ЗапуститьТестированиеИИсправление(Параметры = Неопределено) Экспорт

	ПараметрыСвязиСБазой = СтандартныеПараметрыЗапускаКонфигуратора();
	ВариантыОбработкиНесуществующихСсылок = ВариантОбработкиНесуществующихСсылок();
	ВариантыОбработкиЧастичнойПотериДанных = ВариантОбработкиЧастичнойПотериДанных();

	Если Параметры = Неопределено Тогда
		Параметры = ПолучитьОпцииТиИ();
	КонецЕсли;

	СтрокаОпций = "/IBCheckAndRepair";
	СтрокаОпций = СтрокаОпций + ?(Параметры.ТолькоТестирование, " -TestOnly", "");
	СтрокаОпций = СтрокаОпций + ?(Параметры.Реиндексация, " -ReIndex", "");
	СтрокаОпций = СтрокаОпций + ?(Параметры.ЛогическаяЦелостность, " -LogIntegrity", "");
	СтрокаОпций = СтрокаОпций + ?(Параметры.ЛогическаяИСсылочнаяЦелостность, " -LogAndRefsIntegrity", "");
	СтрокаОпций = СтрокаОпций + ?(Параметры.ПересчетИтогов, " -RecalcTotals", "");
	СтрокаОпций = СтрокаОпций + ?(Параметры.СжатиеТаблиц, " -IBCompression", "");
	СтрокаОпций = СтрокаОпций + ?(Параметры.Реструктуризация, " -Rebuild", "");

	БитыеСсылки = Параметры.ВариантОбработкиНесуществующихСсылок;
	СтрокаОпций = СтрокаОпций + ?(БитыеСсылки = ВариантыОбработкиНесуществующихСсылок.СоздаватьОбъекты, " -BadRefCreate", ?(БитыеСсылки = ВариантыОбработкиНесуществующихСсылок.ОчищатьОбъекты, " -BadRefClear", " -BadRefNone"));

	ЧастичнаяПотеря = Параметры.ВариантОбработкиЧастичнойПотериДанных;
	СтрокаОпций = СтрокаОпций + ?(ЧастичнаяПотеря = ВариантыОбработкиЧастичнойПотериДанных.СоздаватьОбъекты, " -BadDataCreate", " -BadDataDelete");

	СтрокаОпций = СтрокаОпций + ?(Параметры.ПродолжитьТиИСТочкиПрерывания, " -UseStartPoint", "");

	СтрокаОпций = СтрокаОпций + ?(Параметры.МаксВремяТестирования = "", ""," -TimeLimit:" + Параметры.МаксВремяТестирования);
	
	ПараметрыСвязиСБазой.Добавить(СтрокаОпций);

	Лог.Отладка("Параметры запуска ТиИ: " + СтрокаОпций); 

	ВыполнитьКоманду(ПараметрыСвязиСБазой);

КонецПроцедуры // ИмяПроцедуры()


// Функция проверяет возможность обновления файлов выгрузки, для каталога или конкретного файла версий 
//
Функция ПроверитьВозможностьОбновленияФайловВыгрузки(Знач КаталогВыгрузки, Знач ПутьКФайлуВерсийДляСравнения = "", Знач ФорматВыгрузки = "")
	
	ПутьКФайлуИзменений = ВременныеФайлы.НовоеИмяФайла();

	ТекущийФайлВерсийМетаданных = Новый Файл(ОбъединитьПути(КаталогВыгрузки,"ConfigDumpInfo.xml"));
	ФайлВерсийДляСравнения = Новый Файл(ПутьКФайлуВерсийДляСравнения);

	Если НЕ (ТекущийФайлВерсийМетаданных.Существует() ИЛИ (ФайлВерсийДляСравнения.Существует())) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыгрузитьИзмененияКонфигурацииВФайл(КаталогВыгрузки, ПутьКФайлуИзменений, ПутьКФайлуВерсийДляСравнения, ФорматВыгрузки);

	ФайлИзменений = Новый Файл(ПутьКФайлуИзменений);
	
	Если ФайлИзменений.Существует() Тогда
			
		чтениеФайла = Новый ЧтениеТекста(ПутьКФайлуИзменений);
		Если ВРег(чтениеФайла.ПрочитатьСтроку()) = ВРег("FullDump") Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		чтениеФайла.Закрыть();
		
	КонецЕсли;
	
	Возврат Ложь;	

КонецФункции

// Функция проверяет версию текущей платформы по сравнению с требуемой 
//
Функция ИспользуемаяВерсияПлатформыСтаршеИлиРавна(Знач ТребуемаяВерсияПлатформы)
	
	Лог.Отладка(СтрШаблон("Сравниваю версию <%1> с эталоном <%2>", мВерсияПлатформы, ТребуемаяВерсияПлатформы));

	РезультатСравнения = СтроковыеФункции.СравнитьВерсии(мВерсияПлатформы, ТребуемаяВерсияПлатформы);

	Возврат РезультатСравнения >= 0;

КонецФункции

// Производит очистку каталога выгрузки конфигурации в файлы
//   
// Параметры:
//   КаталогВыгрузки 	- Строка - Путь к каталогу,  в который будет выгружена конфигурация;
//
Процедура ОчиститьЦелевойКаталогВыгрузки(Знач КаталогВыгрузки)

	ЕстьОшибкаУдаления = Ложь;
	Для НомерПопытки = 1 По 2 Цикл
		МассивФайлов = НайтиФайлы(КаталогВыгрузки, ПолучитьМаскуВсеФайлы());
		Если МассивФайлов.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;

		Для Каждого ЭлементМассива Из МассивФайлов Цикл
			
			Попытка
				УдалитьФайлы(ЭлементМассива.ПолноеИмя);
			Исключение
				ЕстьОшибкаУдаления = Истина;
				Если НомерПопытки = 2 Тогда
					ВызватьИсключение "Ошибка очистки каталога выгрузки кофнигурации в файлы";
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;

		Если Не ЕстьОшибкаУдаления Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// Инициализация

Лог = Логирование.ПолучитьЛог("oscript.lib.v8runner");
Инициализация();
