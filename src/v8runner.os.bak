///////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ЗАПУСКОМ КОМАНД 1С:Предприятия 8
//

#Использовать logos
#Использовать tempfiles
#Использовать asserts
#Использовать strings
#Использовать 1commands
#Использовать v8find

#Область ОписаниеПеременных

Перем мКонтекстКоманды;
Перем мКаталогСборки;
Перем мВыводКоманды;
Перем мПутьКПлатформе1С;
Перем ЭтоWindows Экспорт;
Перем мВерсияПлатформы;
Перем мИсключениеПриОшибкеВыполненияКоманды;
Перем мУчебнаяВерсияПлатформы;

Перем Лог;
Перем мИмяФайлаИнформации;
Перем мФайлИнформацииВнешний;
Перем мОчищатьФайлИнформации;
Перем мТекстФайлаДоВывода;
Перем мОбработчикОжиданияПроцессаGUI;

Перем мПризнакОжиданияВыполненияПрограммы;

#КонецОбласти

#Область ПрограммыйИнтерфейс

Процедура УстановитьКонтекст(Знач СтрокаСоединения, Знач Пользователь, Знач Пароль) Экспорт

	Если ТипЗнч(СтрокаСоединения) = Тип("Структура") Тогда
		мКонтекстКоманды.КлючСоединенияСБазой = СформироватьСтрокуСоединения(СтрокаСоединения);
	Иначе
		мКонтекстКоманды.КлючСоединенияСБазой = СтрокаСоединения;
	КОнецЕсли;

	мКонтекстКоманды.ИмяПользователя = Пользователь;
	мКонтекстКоманды.Пароль = Пароль;

	ПоказатьКонтекстВРежимеОтладки();
КонецПроцедуры

Функция ПолучитьКонтекст() Экспорт
	КопияКонтекста = СкопироватьСтруктуру(мКонтекстКоманды);
	Возврат КопияКонтекста;
КонецФункции

Процедура ИспользоватьКонтекст(Знач Контекст) Экспорт
	мКонтекстКоманды = СкопироватьСтруктуру(Контекст);
	ПоказатьКонтекстВРежимеОтладки();
КонецПроцедуры

Процедура ПоказатьКонтекстВРежимеОтладки()
	Лог.Отладка("КлючСоединенияСБазой "+ мКонтекстКоманды.КлючСоединенияСБазой);
	Лог.Отладка("ИмяПользователя <"+ мКонтекстКоманды.ИмяПользователя + ">");
	Лог.Отладка(?(ПустаяСтрока(мКонтекстКоманды.Пароль), "Пароль не задан", " Задан пароль "+ мКонтекстКоманды.Пароль));
КонецПроцедуры

Функция ПолучитьВерсиюИзХранилища(Знач СтрокаСоединения,
		Знач ПользовательХранилища,
		Знач ПарольХранилища,
		Знач НомерВерсии = Неопределено,
		Знач ИмяРасширения = Неопределено) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

	Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения + """");
	Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища + """");

	Если Не ПустаяСтрока(ПарольХранилища) Тогда
		Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища + """");
	КонецЕсли;

	Если Не ПустаяСтрока(ИмяРасширения) Тогда
		ФайлРезультата = ОбъединитьПути(КаталогСборки(), "source.cfe");
	Иначе
		ФайлРезультата = ОбъединитьПути(КаталогСборки(), "source.cf");
	КонецЕсли;

	Параметры.Добавить("/ConfigurationRepositoryDumpCfg """+ФайлРезультата + """");

	Если Не ПустаяСтрока(НомерВерсии) Тогда
		Параметры.Добавить("-v "+НомерВерсии);
	КонецЕсли;

	Если Не ПустаяСтрока(ИмяРасширения) Тогда
		Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
	КонецЕсли;

	ВыполнитьКоманду(Параметры);

	Возврат ФайлРезультата;

КонецФункции

// Построение отчета по истории хранилища. Если параметры группировки не указаны и режим совместимости
// указан "Не используется", то отчет формируется с группировкой по версиям. В режимах совместимости
// "Версия 8.1" и "Версия 8.2.13" отчет формируется с группировкой по объектам.
//	Если конфигурация базы данных отличается от редактируемой по свойству совместимости,
//	при обработке командной строки учитывается значение режима совместимости конфигурации базы данных.
//
// Параметры:
//   СтрокаСоединения - Строка - Строка соединения с хранилищем конфигурации
//   ПользовательХранилища - строка - Пользователь для подключения к хранилищу конфигурации
//   ПарольХранилища - Строка - Пароль пользователь для подключения к хранилищу конфигурации
// 	 ПутьКФайлуРезультата - Строка - путь к файлу, в который выводится отчет (формат mxl)
// 	 НомерНачальнойВерсии - Число - номер сохраненной версии, от которой начинает строиться отчет; (По умолчанию 0)
//   НомерКонечнойВерсии - Число, Неопределено - номер сохраненной версии, по которую строится отчет; (по умолчанию "Неопределено")
//   ТипГруппировки - ТипыГруппировкиОтчетаПоВерсиямХранилища - тип группировкой отчета
//   	ГруппировкаПоОбъектам - признак формирования отчета по версиям с группировкой по объектам;
//   	ГруппировкаПоКоммитам - признак формирования отчета по версиям с группировкой по комментарию (по умолчанию).
//   НачальнаяДата - Дата - дата, начиная с которой формируется отчет по хранилищу
//   КонечнаяДата - Дата - дата, по которую формируется отчет по хранилищу
//   НеВключатьВерсииСМетками - Булево - позволяет не включать в отчет версии хранилища, с установленными метками
//   ВключатьВерсииТолькоСМетками - Булево - позволяет включать в отчет только версии хранилища, с установленными метками.
//									Данный параметр игнорируется, если указан параметр НеВключатьВерсииСМетками
//   ВерсияКонфигурации - Строка - позволяет указать версию конфигурации, для которой формируется отчет по хранилищу
//   ФорматОтчета - Строка - задает формат файла с отчетом: тестовый файл (txt) или табличный документ «1С:Предприятие» (mxl).
//								По умолчанию используется формат MXL.
//   ИмяРасширения - Строка - Имя расширения
//
Процедура ПолучитьОтчетПоВерсиямИзХранилища(Знач СтрокаСоединения,
                        Знач ПользовательХранилища,
                        Знач ПарольХранилища = "",
                        Знач ПутьКФайлуРезультата,
                        Знач НомерНачальнойВерсии = 1,
                        Знач НомерКонечнойВерсии = Неопределено,
                        Знач ТипГруппировки = Неопределено,
                        Знач НачальнаяДата = Неопределено,
                        Знач КонечнаяДата = Неопределено,
                        Знач НеВключатьВерсииСМетками = Ложь,
                        Знач ВключатьВерсииТолькоСМетками = Ложь,
                        Знач ВерсияКонфигурации = Неопределено,
                        Знач ФорматОтчета = Неопределено,
                        Знач ИмяРасширения = Неопределено) Экспорт

    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения + """");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища + """");

    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища + """");
    КонецЕсли;

    Параметры.Добавить("/ConfigurationRepositoryReport """+ПутьКФайлуРезультата + """");

    Параметры.Добавить("-NBegin "+НомерНачальнойВерсии);

    Если ЗначениеЗаполнено(НомерКонечнойВерсии) Тогда
        Параметры.Добавить("-NEnd "+НомерКонечнойВерсии);
    КонецЕсли;

    Если ЗначениеЗаполнено(НачальнаяДата) Тогда
        Параметры.Добавить("-DateBegin "+НачальнаяДата);
    КонецЕсли;

    Если ЗначениеЗаполнено(КонечнаяДата) Тогда
        Параметры.Добавить("-DateEnd "+КонечнаяДата);
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(ТипГруппировки) Тогда
        ТипГруппировки = ТипыГруппировкиОтчетаПоВерсиямХранилища.ГруппировкаПоКоммитам;
    КонецЕсли;

    Параметры.Добавить(ТипГруппировки);

    Если НеВключатьВерсииСМетками Тогда
        Параметры.Добавить("-DoNotIncludeVersionsWithLabels");
    КонецЕсли;

    // Данный параметр игнорируется, если в командной строке указан параметр -DoNotIncludeVersionsWithLabels.
    Если НЕ НеВключатьВерсииСМетками И ВключатьВерсииТолькоСМетками Тогда
        Параметры.Добавить("-IncludeOnlyVersionsWithLabels");
    КонецЕсли;

    Если ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.17") Тогда
        Параметры.Добавить("-IncludeCommentLinesWithDoubleSlash");
    КонецЕсли;

    Если НЕ ВерсияКонфигурации = Неопределено Тогда
        Параметры.Добавить("-ConfigurationVersion "+ВерсияКонфигурации);
    КонецЕсли;

    Если НЕ ФорматОтчета = Неопределено Тогда
        Параметры.Добавить("-ReportFormat "+ФорматОтчета);
    КонецЕсли;

    Если Не ИмяРасширения = Неопределено Тогда
        Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
    КонецЕсли;

    ВыполнитьКоманду(Параметры);

КонецПроцедуры

Процедура СоздатьФайлыПоставки(Знач ПутьФайлаПолнойПоставки = "",
							Знач ПутьФайлаПоставкиОбновления = "",
							Знач ДистрибутивыДляОбновления = Неопределено, // Массив файлов дистрибутива cf
							Знач ПутьФайлаСПараметрамиЛицензирования = "") Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

	Параметры.Добавить("/CreateDistributionFiles ");

	Если НЕ ЗначениеЗаполнено(ПутьФайлаПолнойПоставки)
		И НЕ ЗначениеЗаполнено(ПутьФайлаПоставкиОбновления) Тогда
		ВызватьИсключение "Не правильно заданы параметры процедуры <" + "СоздатьФайлыПоставки" + ">";
	КонецЕсли;

	Если ЗначениеЗаполнено(ПутьФайлаПолнойПоставки) Тогда
		Параметры.Добавить("-cffile "+ОбернутьВКавычки(ПутьФайлаПолнойПоставки) +" ");
	КонецЕсли;

	Если ЗначениеЗаполнено(ПутьФайлаПоставкиОбновления)
		И Не ДистрибутивыДляОбновления = Неопределено
		И ДистрибутивыДляОбновления.Количество() > 0 Тогда

		Параметры.Добавить("-cfufile "+ОбернутьВКавычки(ПутьФайлаПоставкиОбновления) +" ");

		// Поддерживаются только файлы cf
		Для каждого ДистрибутивОбновления Из ДистрибутивыДляОбновления Цикл

			Параметры.Добавить("-f "+ОбернутьВКавычки(ДистрибутивОбновления) +" ");

		КонецЦикла;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПутьФайлаСПараметрамиЛицензирования) Тогда
		Параметры.Добавить("-digisign "+ОбернутьВКавычки(ПутьФайлаСПараметрамиЛицензирования) +" ");
	КонецЕсли;

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

Процедура СоздатьФайловоеХранилищеКонфигурации(Знач ПапкаХранилища,
											Знач ПользовательХранилища,
											Знач ПарольХранилища = "",
											Знач ПодключитьБазуКХранилищу = Ложь,
											Знач ИмяРасширения = Неопределено) Экспорт

	ОбеспечитьКаталог(ПапкаХранилища);

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

	Параметры.Добавить("/ConfigurationRepositoryF """+ПапкаХранилища + """");
	Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища + """");

	Если Не ПустаяСтрока(ПарольХранилища) Тогда
		Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища + """");
	КонецЕсли;

	Параметры.Добавить("/ConfigurationRepositoryCreate ");

	Параметры.Добавить("-AllowConfigurationChanges");
	Параметры.Добавить("-ChangesAllowedRule ObjectNotSupported");
	Параметры.Добавить("-ChangesNotRecommendedRule ObjectNotSupported");

	Если ПодключитьБазуКХранилищу = Ложь Тогда
		Параметры.Добавить("-NoBind");
	КонецЕсли;

	Если Не ИмяРасширения = Неопределено Тогда
		Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
	КонецЕсли;

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Захват объектов для редактирования в хранилище конфигурации
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищу конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищу конфигурации
//  ПутьКФайлуСоСпискомОбъектов - Строка - Строка путь к файлу xml c содержанием в формате http://its.1c.ru/db/v839doc#bookmark:adm:TI000000712
// 									 путь к файлу формата XML со списком объектов. Если опция используется, будет выполнена попытка захватить только объекты,
//									 указанные в файле. Если опция не используется, будут захвачены все объекты конфигурации.
//									 Если в списке указаны объекты, захваченныедругим пользователем, эти объекты не будут захвачены и будет выдана ошибка.
//									 При этом доступные для захвата объекта будут захвачены. Подробнее о формате файла см в документации.
//  ПолучатьЗахваченныеОбъекты  - булево - Флаг получения захваченных объектов (По умолчанию равно "Ложь")
//  ИмяРасширения		  - Строка - Имя расширения
//
Процедура ЗахватитьОбъектыВХранилище(Знач СтрокаСоединения,
    								Знач ПользовательХранилища,
                                    Знач ПарольХранилища = "",
                                    Знач ПутьКФайлуСоСпискомОбъектов = "",
                                    Знач ПолучатьЗахваченныеОбъекты = Ложь,
                                    Знач ИмяРасширения = Неопределено) Экспорт

    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения + """");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища + """");

    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища + """");
    КонецЕсли;

    Параметры.Добавить("/ConfigurationRepositoryLock ");

    Если Не ПустаяСтрока(ПутьКФайлуСоСпискомОбъектов) Тогда
        Параметры.Добавить(СтрШаблон("-objects ""%1""", ПутьКФайлуСоСпискомОбъектов));
    КонецЕсли;

    Если ПолучатьЗахваченныеОбъекты Тогда
        Параметры.Добавить("-revised");
    КонецЕсли;

    Если Не ИмяРасширения = Неопределено Тогда
        Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
    КонецЕсли;

    ВыполнитьКоманду(Параметры);

КонецПроцедуры // ЗахватитьОбъектыВХранилище()


// Отмена захват объектов для редактирования в хранилище конфигурации
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищу конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищу конфигурации
//  СписокОбъектов  	  - Строка - Строка путь к файлу xml c содержанием в формате http://its.1c.ru/db/v839doc#bookmark:adm:TI000000712
// 									 Если опция используется, будет выполнена попытка отменить захват только для объектов, указанных в файле.
//									 Если опция не используется, захват будет отменен для всех объектов конфигурации.
//									 При наличии в списке объектов, не захваченных текущим пользователем или захваченных другим пользователем, ошибка выдана не будет
//  ИгнорироватьИзменения - Булево - Флаг игнорирования локальных изменений (По умолчанию равно "Ложь")
//									 Локально измененные объекты будут получены из хранилища, и внесенные изменения будут потеряны.
//									 Если опция не указана, то при наличии локально измененных объектов операция будет отменена и будет выдана ошибка.
//  ИмяРасширения 		  - Строка - Имя расширения
//
Процедура ОтменитьЗахватОбъектовВХранилище(Знач СтрокаСоединения,
    								Знач ПользовательХранилища,
                                    Знач ПарольХранилища = "",
                                    Знач СписокОбъектов = Неопределено,
                                    Знач ИгнорироватьИзменения = Ложь,
                                    Знач ИмяРасширения = Неопределено) Экспорт

    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения + """");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища + """");

    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища + """");
    КонецЕсли;

    Параметры.Добавить("/ConfigurationRepositoryUnlock ");

    Если Не ПустаяСтрока(СписокОбъектов) Тогда
        Параметры.Добавить(СтрШаблон("-objects ""%1""", СписокОбъектов));
    КонецЕсли;

    Если ИгнорироватьИзменения Тогда
        Параметры.Добавить("-force");
    КонецЕсли;

    Если Не ИмяРасширения = Неопределено Тогда
        Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
    КонецЕсли;

    ВыполнитьКоманду(Параметры);

КонецПроцедуры // ВыполнитьОтменуЗахватаВХранилище()

// Помещение изменений объектов в хранилище конфигурации
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищу конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищу конфигурации
//  СписокОбъектов  	  - Строка - Строка путь к файлу xml c содержанием в формате http://its.1c.ru/db/v839doc#bookmark:adm:TI000000712
//                                   Если опция используется, будет выполнена попытка поместить только объекты, указанные в файле.
//                                   Если опция не используется, будут помещены изменения всех объектов конфигурации.
//                                   При наличии в списке объектов, не захваченных текущим пользователем или захваченных другим пользователем, ошибка выдана не будет
//  Комментарий	 	      - Строка - Комментарий к помещаемым. Чтобы установить многострочный комментарий, для каждой строки следует использовать свою опцию comment.
//  ОставитьОбъектыЗахваченными  - булево - оставлять захват для помещенных объектов.
//  ИгнорироватьУдаленные  - булево - Флаг игнорирования удаления объектов. По умолчанию = Ложь
//                                   Если опция используется, при обнаружении ссылок на удаленные объекты будет выполнена попытка их очистить.
//                                   Если опция не указана, при обнаружении ссылок на удаленные объекты будет выдана ошибка.
//   ИмяРасширения - Строка - 		 Имя расширения
//
Процедура ПоместитьИзмененияОбъектовВХранилище(Знач СтрокаСоединения,
                                    Знач ПользовательХранилища,
                                    Знач ПарольХранилища = "",
                                    Знач СписокОбъектов = Неопределено,
                                    Знач Комментарий = "",
                                    Знач ОставитьОбъектыЗахваченными = Ложь,
                                    Знач ИгнорироватьУдаленные = Ложь,
                                    Знач ИмяРасширения = Неопределено) Экспорт

    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения + """");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища + """");

    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища + """");
    КонецЕсли;

    Параметры.Добавить("/ConfigurationRepositoryCommit ");

    Если Не ПустаяСтрока(СписокОбъектов) Тогда
        Параметры.Добавить(СтрШаблон("-objects ""%1""", СписокОбъектов));
    КонецЕсли;

    МассивСтрок = СтрРазделить(Комментарий, Символы.ПС);

    Для Каждого СтрокаКомментария Из МассивСтрок Цикл

        Параметры.Добавить(СтрШаблон("-comment ""%1""", СтрокаКомментария));

    КонецЦикла;

    Если ОставитьОбъектыЗахваченными Тогда
        Параметры.Добавить("-keepLocked");
    КонецЕсли;

    Если ИгнорироватьУдаленные Тогда
        Параметры.Добавить("-force");
    КонецЕсли;

    Если Не ИмяРасширения = Неопределено Тогда
        Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
    КонецЕсли;

    ВыполнитьКоманду(Параметры);

КонецПроцедуры // ПоместитьИзмененияОбъектовВХранилище()


// Установка метки для версии хранилища
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищу конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищу конфигурации
//  Метка  	  			  - Строка - текст метки
//  Комментарий  	  	  - Строка - текст комментария к устанавливаемой метки.
//  Версия  	  	   	  - Строка - номер версии хранилища, для которого устанавливается метка.
//									Если версия не указана, метка ставится для самой последнее версии хранилища.
//									Если указана несуществующая версия, выдается ошибка
//  ИмяРасширения		  - Строка - Имя расширения
//
Процедура УстановитьМеткуДляВерсииВХранилище(Знач СтрокаСоединения,
                                    Знач ПользовательХранилища,
                                    Знач ПарольХранилища = "",
                                    Знач Метка,
                                    Знач Комментарий = "",
                                    Знач Версия = "",
                                    Знач ИмяРасширения = ""
                                    ) Экспорт

    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения + """");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища + """");

    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища + """");
    КонецЕсли;

    Параметры.Добавить("/ConfigurationRepositorySetLabel ");

    Параметры.Добавить(СтрШаблон("-name ""%1""", Метка));

    МассивСтрок = СтрРазделить(Комментарий, Символы.ПС);

    Для Каждого СтрокаКомментария Из МассивСтрок Цикл

       Параметры.Добавить(СтрШаблон("-comment ""%1""", СтрокаКомментария));

    КонецЦикла;

    Если Не ПустаяСтрока(Версия) Тогда
        Параметры.Добавить("-v " + Версия);
    КонецЕсли;

    Если Не ПустаяСтрока(ИмяРасширения) Тогда
        Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
    КонецЕсли;

    ВыполнитьКоманду(Параметры);

КонецПроцедуры // УстановитьМеткуДляВерсииВХранилище()


// Выполняет подключение ранее неподключенной информационной базы (конфигурации/расширения) к хранилищу конфигурации/расширения.
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищу конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищу конфигурации
//  ИгнорироватьНаличиеПодключеннойБД  - Булево - Флаг игнорирования наличия уже у пользователя уже подключенной базы данных. По умолчанию = Ложь
//								 	 Выполняет подключение даже в том случае, если для данного пользователя уже есть конфигурация, связанная с данным хранилищем..
//  ЗаменитьКонфигурациюБД - Булево - Флаг замены конфигурации БД на конфигурацию хранилища  (По умолчанию Истина)
//									 Если конфигурация непустая, данный ключ подтверждает замену конфигурации на конфигурацию из хранилища.
//   ИмяРасширения 		  - Строка - Имя расширения
//
Процедура ПодключитьсяКХранилищу(Знач СтрокаСоединения,
                                    Знач ПользовательХранилища,
                                    Знач ПарольХранилища = "",
                                    Знач ИгнорироватьНаличиеПодключеннойБД = Ложь,
                                    Знач ЗаменитьКонфигурациюБД = Истина,
                                    Знач ИмяРасширения = Неопределено
									) Экспорт
    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения + """");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища + """");

    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища + """");
    КонецЕсли;

    Параметры.Добавить("/ConfigurationRepositoryBindCfg ");

    Если ИгнорироватьНаличиеПодключеннойБД Тогда
        Параметры.Добавить("-forceBindAlreadyBindedUser ");
    КонецЕсли;
    Если ЗаменитьКонфигурациюБД Тогда
        Параметры.Добавить("-forceReplaceCfg ");
    КонецЕсли;
    Если ЗначениеЗаполнено(ИмяРасширения) Тогда
        Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
    КонецЕсли;

	ВыполнитьКоманду(Параметры);
КонецПроцедуры

Процедура ОтключитьсяОтХранилища(Знач ИмяРасширения = Неопределено) Экспорт
	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/ConfigurationRepositoryUnbindCfg -force ");
	Если ЗначениеЗаполнено(ИмяРасширения) Тогда
		Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
	КонецЕсли;
	ВыполнитьКоманду(Параметры);
КонецПроцедуры


// Добавление пользователя хранилища конфигурации.
//	Пользователь, от имени которого выполняется подключение к хранилищу, должен обладать административными правами.
//	Если пользователь с указанным именем существует, то пользователь добавлен не будет.
// Параметры:
//   СтрокаСоединения - Строка - Строка соединения с хранилищем конфигурации
//   ПользовательХранилища - строка - Пользователь для подключения к хранилищу конфигурации
//   ПарольХранилища - Строка - Пароль пользователь для подключения к хранилищу конфигурации
//   НовыйПользователь - Строка - Имя создаваемого пользователя.
//   ПарольПользователя - Строка - Пароль создаваемого пользователя.
//   Право - ПраваПользователяХранилища - Права пользователя. Возможные значения:
// 		ТолькоЧтение - право на просмотр, (по умолчанию)
// 		ПравоЗахватаОбъектов - право на захват объектов,
// 		ПравоИзмененияВерсий - право на изменение состава версий,
// 		Администрирование - право на административные функции.
// 	 ВосстановитьУдаленного - Булево - флаг небходимости востановления удаленного пользователя
//								       Если обнаружен удаленный пользователь с таким же именем, он будет восстановлен.
//   ИмяРасширения - Строка - Имя расширения
//
Процедура ДобавитьПользователяВХранилище(Знач СтрокаСоединения,
                                        Знач ПользовательХранилища,
                                        Знач ПарольХранилища,
                                        Знач НовыйПользователь,
                                        Знач ПарольПользователя = "",
                                        Знач Право = Неопределено,
                                        Знач ВосстановитьУдаленного = Ложь,
                                        Знач ИмяРасширения = Неопределено) Экспорт

    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения + """");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища + """");

    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища + """");
    КонецЕсли;

    Параметры.Добавить("/ConfigurationRepositoryAddUser ");
    Параметры.Добавить(СтрШаблон("-User ""%1""", НовыйПользователь));
    Если Не ПустаяСтрока(ПарольПользователя) Тогда
    	Параметры.Добавить(СтрШаблон("-Pwd ""%1""", ПарольПользователя));
    КонецЕсли;

    Если Не ЗначениеЗаполнено(Право) Тогда
        Право = ПраваПользователяХранилища.ТолькоЧтение;
    КонецЕсли;

    Параметры.Добавить(СтрШаблон("-Rights %1", Право));

    Если ВосстановитьУдаленного Тогда
        Параметры.Добавить("-RestoreDeletedUser");
    КонецЕсли;

    Если Не ИмяРасширения = Неопределено Тогда
        Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
    КонецЕсли;

    ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Копирование пользователей из хранилища конфигурации. Копирование удаленных пользователей не выполняется.
//   Если пользователь с указанным именем существует, то пользователь не будет добавлен.
//
// Параметры:
//   СтрокаСоединения - Строка - Строка соединения с хранилищем конфигурации
//   ПользовательХранилища - строка - Пользователь для подключения к хранилищу конфигурации
//   ПарольХранилища - Строка - Пароль пользователь для подключения к хранилищу конфигурации
//   СтрокаСоединенияХранилищаКопии - Строка - Путь к хранилищу, из которого выполняется копирование пользователей.
//   ПользовательХранилищаКопии - Строка - Имя пользователя хранилища, из которого выполняется копирование пользователей.
//   ПарольХранилищаКопии - Строка - Пароль пользователя хранилища, из которого выполняется копирование пользователей.
//   ВосстановитьУдаленного - Булево - флаг небходимости востановления удаленных пользователей
//   ИмяРасширения - Строка - Имя расширения
//
Процедура КопироватьПользователейИзХранилища(Знач СтрокаСоединения,
                                        Знач ПользовательХранилища,
                                        Знач ПарольХранилища,
                                        Знач СтрокаСоединенияХранилищаКопии,
                                        Знач ПользовательХранилищаКопии,
                                        Знач ПарольХранилищаКопии = "",
                                        Знач ВосстановитьУдаленного = Ложь,
                                        Знач ИмяРасширения = Неопределено) Экспорт

    Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения + """");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища + """");

    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища + """");
    КонецЕсли;

    Параметры.Добавить("/ConfigurationRepositoryCopyUsers ");
    Параметры.Добавить(СтрШаблон("-Path ""%1""", СтрокаСоединенияХранилищаКопии));
    Параметры.Добавить(СтрШаблон("-User ""%1""", ПользовательХранилищаКопии));
    Если Не ПустаяСтрока(ПарольХранилищаКопии) Тогда
    	Параметры.Добавить(СтрШаблон("-Pwd ""%1""", ПарольХранилищаКопии));
    КонецЕсли;

    Если ВосстановитьУдаленного Тогда
        Параметры.Добавить("-RestoreDeletedUser");
    КонецЕсли;

    Если Не ИмяРасширения = Неопределено Тогда
        Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
    КонецЕсли;

    ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Выгрузка конфигурации в файлы
//
// Параметры:
//   КаталогВыгрузки    - Строка - Путь к каталогу,  в который будет выгружена конфигурация;
//   ФорматВыгрузки     - РежимВыгрузкиКонфигурации - По умолчанию выгрузка производится в иерархическом формате:
//   ТолькоИзмененные   - Булево - указывает, что выгрузка будет обновлена (будут выгружены только файлы, версии которых отличаются от ранее выгруженных).
//                                 Файл версий (ConfigDumpInfo.xml) будет получен из текущего каталога выгрузки.
//	                               По завершении выгрузки файл версий обновляется
//   ПутьКФайлуИзменений - Строка - Указывает путь к файлу,в который будут выведены изменения текущей конфигурации. Изменения вычисляются относительно файла версий в текущем каталоге выгрузки.
//   ПутьКФайлуВерсийДляСравнения - Строка - Указывает путь к файлу, который будет использован для сравнения изменений.
//
//   Для того, чтобы работали функции 8.3.10, необходимо явно указать версию.
Процедура ВыгрузитьКонфигурациюВФайлы(Знач КаталогВыгрузки, Знач ФорматВыгрузки = "", Знач ТолькоИзмененные = Ложь, Знач ПутьКФайлуВерсийДляСравнения = "") Экспорт

	Если НЕ ЗначениеЗаполнено(ФорматВыгрузки) Тогда
		ФорматВыгрузки = РежимВыгрузкиКонфигурации.Иерархический;
	КонецЕсли;

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить(СтрШаблон("/DumpConfigToFiles %1", ОбернутьВКавычки(КаталогВыгрузки)));
	Параметры.Добавить(СтрШаблон("-format %1", ФорматВыгрузки));


	Если ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.10") Тогда

		Если ТолькоИзмененные Тогда

			Если ПроверитьВозможностьОбновленияФайловВыгрузки(КаталогВыгрузки, ПутьКФайлуВерсийДляСравнения, ФорматВыгрузки) Тогда

				Параметры.Добавить("-update");

				Параметры.Добавить("-force");

				Если ЗначениеЗаполнено(ПутьКФайлуВерсийДляСравнения) Тогда

					Параметры.Добавить(СтрШаблон("-configDumpInfoForChanges %1", ОбернутьВКавычки(ПутьКФайлуВерсийДляСравнения)));

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Выгрузка изменений в файлах конфигурации в файл
//
// Параметры:
//   КаталогВыгрузки 	- Строка - Путь к каталогу, в который была выгружена конфигурация;
//   ПутьКФайлуИзменений - Строка - Указывает путь к файлу,в который будут выведены изменения текущей конфигурации. Изменения вычисляются относительно файла версий в текущем каталоге выгрузки.
//   ПутьКФайлуВерсийДляСравнения - Строка - Указывает путь к файлу, который будет использован для сравнения изменений.
//   ФорматВыгрузки 	- РежимВыгрузкиКонфигурации - По умолчанию выгрузка производится в иерархическом формате.
//
//   Для того, чтобы работали функции 8.3.10, необходимо явно указать версию.
Процедура ВыгрузитьИзмененияКонфигурацииВФайл(Знач КаталогВыгрузки, Знач ПутьКФайлуИзменений, Знач ПутьКФайлуВерсийДляСравнения = "", Знач ФорматВыгрузки = "") Экспорт

	Ожидаем.Что(ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.10"), "Данная процедура не поддерживается выбранной версией платформы")
		.ЭтоИстина();

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить(СтрШаблон("/DumpConfigToFiles %1", ОбернутьВКавычки(КаталогВыгрузки)));
	Параметры.Добавить(СтрШаблон("-getChanges %1", ОбернутьВКавычки(ПутьКФайлуИзменений)));


	Если ЗначениеЗаполнено(ПутьКФайлуВерсийДляСравнения) Тогда

		Параметры.Добавить(СтрШаблон("-configDumpInfoForChanges %1", ОбернутьВКавычки(ПутьКФайлуВерсийДляСравнения)));

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ФорматВыгрузки) Тогда
		ФорматВыгрузки = РежимВыгрузкиКонфигурации.Иерархический;
	КонецЕсли;

	Параметры.Добавить(СтрШаблон("-format %1", ФорматВыгрузки));

	ВыполнитьКоманду(Параметры);
КонецПроцедуры

// Загрузка конфигурации из файлов
//
// Параметры:
//   КаталогЗагрузки 	- Строка - Путь к каталогу, содержащий XML-файлы конфигурации;
//   ПутьКСпискуФайловЗагрузки - Строка - Указывает путь к файлу, в котором перечислены файлы, которые требуется загрузить. При запуске в режиме агента путь к загружаемым файлам должен быть относительным.
//											Указываемый файл должен удовлетворять следующим требованиям:
//											- Файл должен быть в кодировке UTF-8.
//											- Имена файлов должны быть указаны через перенос (поддерживаются символы переноса \r\n ("следующая строка") и \r ("возврат каретки")).
//											- Файл не должен содержать пустые строки между именами файлов.
//   ФорматВыгрузки 	- РежимВыгрузкиКонфигурации - Используется для частичной загрузки (при передаче параметра ПутьКСпискуФайловЗагрузки).
//												 Указывает формат загрузки файлов. По умолчанию загрузка производится в иерархическом формате:
//   ОбновитьФайлВерсий - Булево - указывает, что в конце загрузки в каталоге будет создан файл версий ConfigDumpInfo.xml,
//									соответствующий загруженной конфигурации.
//									Если выполняется частичная загрузка (используется опция -files или -listFile), файл версий будет обновлен.
//   Для того, чтобы работали функции 8.3.10, необходимо явно указать версию.
Процедура ЗагрузитьКонфигурациюИзФайлов(Знач КаталогЗагрузки,
                                        Знач ПутьКСпискуФайловЗагрузки = "",
                                        Знач ФорматВыгрузки = "",
                                        Знач ОбновитьФайлВерсий = Истина,
                                        Знач ОбновитьКонфигурациюИБ = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(ФорматВыгрузки) Тогда
		ФорматВыгрузки = РежимВыгрузкиКонфигурации.Иерархический;
	КонецЕсли;

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить(СтрШаблон("/LoadConfigFromFiles %1", ОбернутьВКавычки(КаталогЗагрузки)));

	Если ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.10") Тогда

		Если ОбновитьФайлВерсий Тогда

			Параметры.Добавить("-updateConfigDumpInfo");

		КонецЕсли;

		Если ЗначениеЗаполнено(ПутьКСпискуФайловЗагрузки) Тогда

			Параметры.Добавить(СтрШаблон("-listFile %1", ОбернутьВКавычки(ПутьКСпискуФайловЗагрузки)));
			Параметры.Добавить(СтрШаблон("-format %1", ФорматВыгрузки));

		КонецЕсли;

		Если ОбновитьКонфигурациюИБ Тогда
			Параметры.Добавить("/UpdateDBCfg");
		КонецЕсли;

	КонецЕсли;


	ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Загрузка расширения конфигурации из файлов
//
// Параметры:
//   КаталогЗагрузки 	- Строка - Путь к каталогу, содержащий XML-файлы конфигурации;
//   ИмяРасширения      - Строка -  Наименование расширения, если не указано то используется "-AllExtensions"
//                                 (Каждый подкаталог в указанном каталоге считается расширением. Параметр несовместим с параметрами -files или -listFile.)
//   ПутьКСпискуФайловЗагрузки - Строка - Указывает путь к файлу, в котором перечислены файлы, которые требуется загрузить. При запуске в режиме агента путь к загружаемым файлам должен быть относительным.
//											Указываемый файл должен удовлетворять следующим требованиям:
//											- Файл должен быть в кодировке UTF-8.
//											- Имена файлов должны быть указаны через перенос (поддерживаются символы переноса \r\n ("следующая строка") и \r ("возврат каретки")).
//											- Файл не должен содержать пустые строки между именами файлов.
//                                         ( Реализовано в версиях 8.3.7.1759 и 8.3.8.1652.  http://v8.1c.ru/o7/201507xml/index.htm)
//   ФорматВыгрузки 	- РежимВыгрузкиКонфигурации - Используется для частичной загрузки (при передаче параметра ПутьКСпискуФайловЗагрузки).
//												 Указывает формат загрузки файлов. По умолчанию загрузка производится в иерархическом формате:
//                                          ( Реализовано в версиях 8.3.7.1759 и 8.3.8.1652.  http://v8.1c.ru/o7/201507xml/index.htm)
//   ОбновитьФайлВерсий - Булево - указывает, что в конце загрузки в каталоге будет создан файл версий ConfigDumpInfo.xml,
//									соответствующий загруженной конфигурации.
//                                  (Реализовано начиная с версии 8.3.10)
//									Если выполняется частичная загрузка (используется опция -files или -listFile), файл версий будет обновлен.
Процедура ЗагрузитьРасширениеИзФайлов(Знач КаталогЗагрузки,
			Знач ИмяРасширения = "-AllExtensions",
			Знач ПутьКСпискуФайловЗагрузки = "",
			Знач ФорматВыгрузки = "",
			Знач ОбновитьФайлВерсий = Истина) Экспорт

	Если НЕ ЗначениеЗаполнено(ФорматВыгрузки) Тогда
		ФорматВыгрузки = РежимВыгрузкиКонфигурации.Иерархический;
	КонецЕсли;

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить(СтрШаблон("/LoadConfigFromFiles %1", ОбернутьВКавычки(КаталогЗагрузки)));

	Если ИмяРасширения = "-AllExtensions" Тогда
		Параметры.Добавить(ИмяРасширения);
	Иначе
		Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
	КонецЕсли;

	Если ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.10") Тогда
		Если ОбновитьФайлВерсий Тогда
			Параметры.Добавить("-updateConfigDumpInfo");
		КонецЕсли;
	КонецЕсли;

	Если ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.7.1759") Тогда
		Если НЕ ИмяРасширения = "-AllExtensions" Тогда
			Если ЗначениеЗаполнено(ПутьКСпискуФайловЗагрузки) Тогда
				Параметры.Добавить(СтрШаблон("-listFile %1", ОбернутьВКавычки(ПутьКСпискуФайловЗагрузки)));
			КонецЕсли;
		КонецЕсли;
		Параметры.Добавить(СтрШаблон("-format %1", ФорматВыгрузки));
	КонецЕсли;

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Загрузка расширения конфигурации из файлов
//
// Параметры:
//   КаталогВыгрузки 	- Строка - Путь к каталогу, содержащий XML-файлы конфигурации;
//   ИмяРасширения      - Строка -  Наименование расширения, если не указано то используется "-AllExtensions"
//                                 (Каждый подкаталог в указанном каталоге считается расширением. Параметр несовместим с параметрами -files или -listFile.)
//   ФорматВыгрузки 	- РежимВыгрузкиКонфигурации - Используется для частичной загрузки (при передаче параметра ПутьКСпискуФайловЗагрузки).
//												 Указывает формат загрузки файлов. По умолчанию загрузка производится в иерархическом формате:
//                                          ( Реализовано в версиях 8.3.7.1759 и 8.3.8.1652.  http://v8.1c.ru/o7/201507xml/index.htm)
//   ТолькоИзмененные   - Булево - указывает, что выгрузка будет обновлена (будут выгружены только файлы, версии которых отличаются от ранее выгруженных).
//                                 Файл версий (ConfigDumpInfo.xml) будет получен из текущего каталога выгрузки.
//	                               По завершении выгрузки файл версий обновляется
//   ПутьКФайлуВерсийДляСравнения - Строка - Указывает путь к файлу, который будет использован для сравнения изменений.
//                                  (Реализовано начиная с версии 8.3.10)
Процедура ВыгрузитьРасширениеВФайлы(Знач КаталогВыгрузки, Знач ИмяРасширения = "-AllExtensions", Знач ФорматВыгрузки = "", Знач ТолькоИзмененные = Ложь, Знач ПутьКФайлуВерсийДляСравнения = "") Экспорт

	Если НЕ ЗначениеЗаполнено(ФорматВыгрузки) Тогда
		ФорматВыгрузки = РежимВыгрузкиКонфигурации.Иерархический;
	КонецЕсли;

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить(СтрШаблон("/DumpConfigToFiles %1", ОбернутьВКавычки(КаталогВыгрузки)));
	Если ИмяРасширения = "-AllExtensions" Тогда
		Параметры.Добавить(ИмяРасширения);
	Иначе
		Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
	КонецЕсли;

	Если ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.7.1759") Тогда
		Параметры.Добавить(СтрШаблон("-format %1", ФорматВыгрузки));
	КонецЕсли;

	Если ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.10") Тогда

		Если ТолькоИзмененные Тогда

			Если ПроверитьВозможностьОбновленияФайловВыгрузки(КаталогВыгрузки, ПутьКФайлуВерсийДляСравнения, ФорматВыгрузки) Тогда

				Параметры.Добавить("-update");

				Параметры.Добавить("-force");

				Если ЗначениеЗаполнено(ПутьКФайлуВерсийДляСравнения) Тогда

					Параметры.Добавить(СтрШаблон("-configDumpInfoForChanges %1", ОбернутьВКавычки(ПутьКФайлуВерсийДляСравнения)));

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Выполняет загрузку конфигурации из файла
//
// Параметры:
//   ПутьФайлРасширения - Строка - путь к файлу расширения
//   ОбновитьКонфигурациюИБ - Булево - признак обновления конфигурации
//
Процедура ЗагрузитьКонфигурациюИзФайла(Знач ПутьФайлКонфигурации, Знач ОбновитьКонфигурациюИБ = Ложь) Экспорт

	ФайлКонфигурации = Новый Файл(ПутьФайлКонфигурации);
	Ожидаем.Что(ФайлКонфигурации.Существует(), "Файл конфигурации <"+ПутьФайлКонфигурации +"> существует, а это не так").ЭтоИстина();

	Ожидаем.Что(ОбновитьКонфигурациюИБ = Ложь ИЛИ ОбновитьКонфигурациюИБ = Истина,
		"Параметр ОбновитьКонфигурациюИБ должен быть или Истина или Ложь, а это не так").ЭтоИстина();

	// Выполняем загрузку и обновление за два шага, т.к.
	// иногда обновление конфигурации ИБ на новой базе проходит неудачно,
	// если запустить две операции в одной команде.

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/LoadCfg """ + ПутьФайлКонфигурации + """");
	ВыполнитьКоманду(Параметры);

	Если ОбновитьКонфигурациюИБ Тогда
		ОбновитьКонфигурациюБазыДанных(Ложь, Истина);
	КонецЕсли;

КонецПроцедуры

// Выполняет загрузку конфигурации расширения из файла
//
// Параметры:
//   ПутьФайлРасширения - Строка - путь к файлу расширения
//   ИмяРасширения - Строка - имя расширения
//   ОбновитьКонфигурациюИБ - Булево - признак обновления конфигурации
//
Процедура ЗагрузитьРасширениеИзФайла(Знач ПутьФайлРасширения, Знач ИмяРасширения, Знач ОбновитьКонфигурациюИБ = Ложь) Экспорт

	ФайлРасширения = Новый Файл(ПутьФайлРасширения);
	Ожидаем.Что(ФайлРасширения.Существует(), "Файл расширения <"+ПутьФайлРасширения +"> существует, а это не так").ЭтоИстина();

	Ожидаем.Что(ОбновитьКонфигурациюИБ = Ложь ИЛИ ОбновитьКонфигурациюИБ = Истина,
		"Параметр ОбновитьКонфигурациюИБ должен быть или Истина или Ложь, а это не так").ЭтоИстина();
	// Выполняем загрузку и обновление за два шага, т.к.
	// иногда обновление конфигурации ИБ на новой базе проходит неудачно,
	// если запустить две операции в одной команде.

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/LoadCfg """ + ПутьФайлРасширения + """");
	Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
	ВыполнитьКоманду(Параметры);

	Если ОбновитьКонфигурациюИБ Тогда
		ОбновитьКонфигурациюБазыДанных(Ложь, Ложь, Ложь, ИмяРасширения);
	КонецЕсли;

КонецПроцедуры

// Выгружает конфигурацию в файл
//
// Параметры:
//   ФайлКонфигурации - Строка - путь к файлу конфигурации
//
Процедура ВыгрузитьКонфигурациюВФайл(Знач ФайлКонфигурации) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/DumpCfg """ + ФайлКонфигурации + """");
	ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Выгружает конфигурацию расширения в файл
//
// Параметры:
//   ПутьФайлРасширения - Строка - путь к файлу расширения
//   ИмяРасширения - Строка - имя расширения
//
Процедура ВыгрузитьРасширениеВФайл(Знач ПутьФайлРасширения, Знач ИмяРасширения) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/DumpCfg """ + ПутьФайлРасширения + """");
	Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
	ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Выполнить объединение текущей конфигурации с файлом (с использованием файла настроек)
// Описание ИТС: http://its.1c.ru/db/v83doc#bookmark:adm:TI000000527
//
// Параметры:
//   ФайлКонфигурации - Строка - имя cf-файла с объединяемой конфигурацией.
//   ФайлНастроек - Строка - имя файла с настройками объединения конфигураций.
//   ПоставитьНаПоддержку - Булево, Неопределено - флаг необходимости установки конфигурации на поддержку.
//		Неопределено: по умолчанию флаг не передается.
//		Истина: конфигурация ставится на поддержку, если есть такая возможность.
//		Ложь: конфигурация не ставится на поддержку, даже если есть такая вожзможность.
//   ВключитьВОбъединениеОбъектыПоНеразрешеннымСсылкам - Булево, Неопределено - флаг небходимости включения
//		в объединение объектов, не включенных в список объединяемых и отсутствующих в основной конфигурации.
//		Неопределено: по умолчанию флаг не передается.
//		Истина: включать объекты с неразрешенными ссылками в список объединяемых.
//		Ложь: очищать ссылки на объекты с неразрешенными ссылками.
//   Принудительно - Булево - флаг принудительного обновления.
//		Обновление будет производиться в случае наличия:
//			предупреждений об удаляемых объектов, на которые есть ссылки в объектах,
//				не участвующих в объединении (такие объекты будут исключены из объединения);
//			предупреждений о применении настроек.
//		Если не указан, то объединение будет прервано в вышеуказанных случаях.
//   ПараметрыХранилища - Структура:
//		* СтрокаПодключенияХранилище	- Строка - Адрес хранилища
//		* ПользовательХранилища			- Строка - Имя пользователя хранилища
//		* ПарольХранилища				- Строка - Пароль пользователя хранилища
//   ИмяРасширения - Строка - имя расширения
//
Процедура ОбъединитьКонфигурациюСФайлом(Знач ФайлКонфигурации,
								 Знач ФайлНастроек,
								 Знач ПоставитьНаПоддержку = Неопределено,
								 Знач ВключитьВОбъединениеОбъектыПоНеразрешеннымСсылкам = Неопределено,
								 Знач Принудительно = Ложь,
								 Знач ПараметрыХранилища = Неопределено,
								 Знач ИмяРасширения = Неопределено) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/MergeCfg " + ОбернутьВКавычки(ФайлКонфигурации));
	Параметры.Добавить("-Settings " + ОбернутьВКавычки(ФайлНастроек));

	Если ПоставитьНаПоддержку = Истина Тогда
		Параметры.Добавить("-EnableSupport");
	ИначеЕсли ПоставитьНаПоддержку = Ложь Тогда
		Параметры.Добавить("-DisableSupport");
	КонецЕсли;

	Если ВключитьВОбъединениеОбъектыПоНеразрешеннымСсылкам = Истина Тогда
		Параметры.Добавить("-IncludeObjectsByUnresolvedRefs");
	ИначеЕсли ВключитьВОбъединениеОбъектыПоНеразрешеннымСсылкам = Ложь Тогда
		Параметры.Добавить("-ClearUnresolvedRefs");
	КонецЕсли;

	Если НЕ ИмяРасширения = Неопределено Тогда
		Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
	КонецЕсли;

	Если Принудительно Тогда
		Параметры.Добавить("-force");
	КонецЕсли;

	Если НЕ ПараметрыХранилища = Неопределено Тогда
		Параметры.Добавить("/ConfigurationRepositoryF """ + ПараметрыХранилища.СтрокаПодключенияХранилище + """");
		Параметры.Добавить("/ConfigurationRepositoryN """ + ПараметрыХранилища.ПользовательХранилища + """");

		Если ЗначениеЗаполнено(ПараметрыХранилища.ПарольХранилища) Тогда
			Параметры.Добавить("/ConfigurationRepositoryP """ + ПараметрыХранилища.ПарольХранилища + """");
		КонецЕсли;
	КонецЕсли;

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Обновить конфигурацию БД
//
// Параметры:
//   ПредупрежденияКакОшибки - Булево - если есть предупреждения, они выдаются как ошибки. Необязательно. По Умолчанию - Ложь.
//   НаСервере - Булево - выполнять на сервере. Необязательно. По Умолчанию - Истина.
//   ДинамическоеОбновление - Булево - использовать. Необязательно. По Умолчанию - Ложь.
//   ИмяРасширения - Строка - имя расширения. Необязательно.
//
Процедура ОбновитьКонфигурациюБазыДанных(
	ПредупрежденияКакОшибки = Ложь, НаСервере = Истина,
	ДинамическоеОбновление = Ложь,
	ИмяРасширения = "") Экспорт

	ПараметрыСвязиСБазой = СтандартныеПараметрыЗапускаКонфигуратора();
	ПараметрыСвязиСБазой.Добавить("/UpdateDBCfg");
	Если ЗначениеЗаполнено(ИмяРасширения) Тогда
		ПараметрыСвязиСБазой.Добавить("-Dynamic+");
	Иначе
		Если Не ДинамическоеОбновление Тогда
			ПараметрыСвязиСБазой.Добавить("-Dynamic-");
		Иначе
			ПараметрыСвязиСБазой.Добавить("-Dynamic+");
		КонецЕсли;
	КонецЕсли;

	Если ПредупрежденияКакОшибки Тогда
		ПараметрыСвязиСБазой.Добавить("-WarningsAsErrors");
	КонецЕсли;
	Если НаСервере И Не ЗначениеЗаполнено(ИмяРасширения) Тогда
		ПараметрыСвязиСБазой.Добавить("-Server");
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяРасширения) Тогда
		ПараметрыСвязиСБазой.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
	КонецЕсли;

	ВыполнитьКоманду(ПараметрыСвязиСБазой);

КонецПроцедуры

// Обновить конфигурацию БД на сервере
//
// Параметры:
//   ПредупрежденияКакОшибки - Булево - если есть предупреждения, они выдаются как ошибки. Необязательно.
//		По Умолчанию - Ложь.
//   ДинамическоеОбновление - Булево - использовать. Необязательно. По Умолчанию - Ложь.
//   РежимРеструктуризации - Строка, Неопределено - рекомендуем использовать значения из РежимыРеструктуризации().
//			Например, РежимыРеструктуризации().Второй
//		Необязательно. По Умолчанию - Неопределено. т.е. использовать режим 1С по умолчанию
//   ИмяРасширения - Строка - Имя расширения
//
Процедура ОбновитьКонфигурациюБазыДанныхНаСервере(
	ПредупрежденияКакОшибки = Ложь,
	ДинамическоеОбновление = Ложь,
	РежимРеструктуризации = Неопределено,
	Знач ИмяРасширения = Неопределено) Экспорт

	ПараметрыСвязиСБазой = СтандартныеПараметрыЗапускаКонфигуратора();
	ПараметрыСвязиСБазой.Добавить("/UpdateDBCfg");
	Если Не ДинамическоеОбновление Тогда
		ПараметрыСвязиСБазой.Добавить("-Dynamic-");
	Иначе
		ПараметрыСвязиСБазой.Добавить("-Dynamic");
	КонецЕсли;

	Если ПредупрежденияКакОшибки Тогда
		ПараметрыСвязиСБазой.Добавить("-WarningsAsErrors");
	КонецЕсли;
	ПараметрыСвязиСБазой.Добавить("-Server");
	Если ЗначениеЗаполнено(РежимРеструктуризации) Тогда
		ПараметрыСвязиСБазой.Добавить(РежимРеструктуризации);
	КонецЕсли;
	Если Не ИмяРасширения = Неопределено Тогда
		ПараметрыСвязиСБазой.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
	КонецЕсли;
	ВыполнитьКоманду(ПараметрыСвязиСБазой);

КонецПроцедуры

// Возвращает возможные режимы реструктуризации
//
//  Возвращаемое значение:
//   ФиксированнаяСтруктура - коллекция с ключами Первый, Второй
//
Функция РежимыРеструктуризации() Экспорт

	Режимы = Новый Структура;
	Режимы.Вставить("Первый", "-v1");
	Режимы.Вставить("Второй", "-v2");

	Возврат Новый ФиксированнаяСтруктура(Режимы);

КонецФункции

// Выполнить возврат к конфигурации базы данных
//
// Параметры:
//   ИмяРасширения - Строка - Имя расширения
//
Процедура ВернутьсяККонфигурацииБазыДанных(Знач ИмяРасширения = Неопределено) Экспорт

	ПараметрыСвязиСБазой = СтандартныеПараметрыЗапускаКонфигуратора();
	ПараметрыСвязиСБазой.Добавить("/RollbackCfg");

	Если Не ИмяРасширения = Неопределено Тогда
		ПараметрыСвязиСБазой.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
	КонецЕсли;

	ВыполнитьКоманду(ПараметрыСвязиСБазой);

КонецПроцедуры

// Выполнить обновление конфигурации, находящейся на поддержке, или объединение текущей конфигурации с файлом.
//
// Параметры:
//   КаталогВерсии - Строка - каталог, в котором должен быть файл 1cv8.cf или файл обновления 1cv8.cfu
//   ИспользоватьПолныйДистрибутив - Булево - Если Истина, ищется файл 1cv8.cfu, иначе ищется файл обновления 1cv8.cfu
//
Процедура ОбновитьКонфигурацию(Знач КаталогВерсии, Знач ИспользоватьПолныйДистрибутив = Ложь) Экспорт

	ПараметрыЗапуска = СтандартныеПараметрыЗапускаКонфигуратора();

	Если ИспользоватьПолныйДистрибутив = Неопределено Тогда
		ИспользоватьПолныйДистрибутив = Не КаталогСодержитФайлОбновления(КаталогВерсии);
	КонецЕсли;

	Если ИспользоватьПолныйДистрибутив Тогда
		ФайлОбновления = "1cv8.cf";
	Иначе
		ФайлОбновления = "1cv8.cfu";
	КонецЕсли;

	ПараметрыЗапуска.Добавить("/UpdateCfg " + ОбернутьВКавычки(ОбъединитьПути(КаталогВерсии, ФайлОбновления)));

	ВыполнитьКоманду(ПараметрыЗапуска);

КонецПроцедуры

// Выполнить обновление конфигурации, находящейся на поддержке.
// Выполнить объединение текущей конфигурации с файлом (с использованием файла настроек).
//
// Параметры:
//   ПутьФайлаКонфигурации - Строка - каталог, в котором должен быть файл 1cv8.cf или файл обновления 1cv8.cfu
//   ПутьФайлаНастроек - Строка - имя файла с настройками объединения конфигураций.
//		Значение по умолчанию - Неопределено, т.е. файл не передается
//   ВключитьВОбъединениеОбъектыПоНеразрешеннымСсылкам - Булево, Неопределено - флаг небходимости включения
//		в объединение объектов, не включенных в список объединяемых и отсутствующих в основной конфигурации.
//		Неопределено: по умолчанию флаг не передается.
//		Истина: включать объекты с неразрешенными ссылками в список объединяемых.
//		Ложь: очищать ссылки на объекты с неразрешенными ссылками.
//   ВывестиДваждыИзмененныеОбъекты - Булево - флаг вывести список всех дважды измененных свойств в файл для вывода служебных сообщений.
//		Значение по умолчанию - Ложь
//   Принудительно - Булево - флаг принудительного обновления.
//		Обновление будет производиться в случае наличия:
// 			предупреждений об удаляемых объектах, на которые есть ссылки в объектах, не участвующих в объединении (такие объекты будут исключены из объединения).
// 			предупреждений о наличии дважды измененных свойств, для которых не был выбран режим объединения (такие свойства будут объединены с настройками по умолчанию).
// 			объектов, изменение которых запрещено правилами поддержки (такие объекты будут исключены из объединения).
// 			предупреждений о применении настроек.
// 		Если не указан, то объединение будет прервано в вышеуказанных случаях.
//		Значение по умолчанию - Ложь
//
Процедура ОбновитьКонфигурациюИзФайла(Знач ПутьФайлаКонфигурации, Знач ПутьФайлаНастроек = Неопределено,
										Знач ВключитьВОбъединениеОбъектыПоНеразрешеннымСсылкам = Неопределено,
										Знач Принудительно = Ложь, Знач ВывестиДваждыИзмененныеОбъекты = Ложь) Экспорт

	ПараметрыЗапуска = СтандартныеПараметрыЗапускаКонфигуратора();

	ПараметрыЗапуска.Добавить("/UpdateCfg " + ОбернутьВКавычки(ПутьФайлаКонфигурации));

	Если ЗначениеЗаполнено(ПутьФайлаНастроек) Тогда
		ПараметрыЗапуска.Добавить("-Settings " + ОбернутьВКавычки(ПутьФайлаНастроек));
	КонецЕсли;

	Если ВключитьВОбъединениеОбъектыПоНеразрешеннымСсылкам = Истина Тогда
		ПараметрыЗапуска.Добавить("-IncludeObjectsByUnresolvedRefs");
	ИначеЕсли ВключитьВОбъединениеОбъектыПоНеразрешеннымСсылкам = Ложь Тогда
		ПараметрыЗапуска.Добавить("-ClearUnresolvedRefs");
	КонецЕсли;

	Если Принудительно Тогда
		ПараметрыЗапуска.Добавить("-force");
	КонецЕсли;
	Если ВывестиДваждыИзмененныеОбъекты Тогда
		ПараметрыЗапуска.Добавить("-DumpListOfTwiceChangedProperties");
	КонецЕсли;

	ВыполнитьКоманду(ПараметрыЗапуска);

КонецПроцедуры

Процедура СнятьКонфигурациюСПоддержки(Знач Принудительно = Ложь) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/ManageCfgSupport -disableSupport");
	Если Принудительно Тогда
		Параметры.Добавить("-force");
	КонецЕсли;

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

Процедура СконвертироватьФайлКонфигурации(Знач ФайлКонфигурации) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/ConvertFiles """ + ФайлКонфигурации + """");
	ВыполнитьКоманду(Параметры);

КонецПроцедуры

Процедура СоздатьФайловуюБазу(Знач КаталогБазы, Знач ПутьКШаблону = "", Знач ИмяБазыВСписке = "") Экспорт

	Лог.Отладка("Создаю файловую базу "+КаталогБазы);

	ОбеспечитьКаталог(КаталогБазы);
	УдалитьФайлы(КаталогБазы, "*.*");

	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить("CREATEINFOBASE");
	ПараметрыЗапуска.Добавить("File=""" + КаталогБазы + """");
	Если мОчищатьФайлИнформации Тогда
		ПараметрыЗапуска.Добавить("/Out " + ОбернутьВКавычки(ФайлИнформации()));
	Иначе
		ПараметрыЗапуска.Добавить("/Out " + ОбернутьВКавычки(ФайлИнформации()) + " -NoTruncate");
	КонецЕсли;

	Если ИмяБазыВСписке <> "" Тогда
		ПараметрыЗапуска.Добавить("/AddInList""" + ИмяБазыВСписке + """");
	КонецЕсли;
	Если ПутьКШаблону <> "" Тогда
		ПараметрыЗапуска.Добавить("/UseTemplate""" + ПутьКШаблону + """");
	КонецЕсли;

	Если НЕ ПустаяСтрока(мКонтекстКоманды.КодЯзыка) Тогда
		ПараметрыЗапуска.Добавить("/L" + мКонтекстКоманды.КодЯзыка);
	КонецЕсли;
	Если НЕ ПустаяСтрока(мКонтекстКоманды.КодЯзыкаСеанса) Тогда
		ПараметрыЗапуска.Добавить("/VL" + мКонтекстКоманды.КодЯзыкаСеанса);
	КонецЕсли;

	СохранитьТекстФайлаИнформации();

	КодВозврата = ЗапуститьИПодождать(ПараметрыЗапуска);

	УстановитьВывод(ПрочитатьФайлИнформации());

	Если КодВозврата <> 0 Тогда
		ВызватьИсключение ВыводКоманды();
	КонецЕсли;

КонецПроцедуры

// Создание серверной информационной базы 1С
//
// Параметры:
//  ПараметрыБазы1С            - Структура
//		 Сервер1С              - Строка   - Адрес кластера серверов 1С ([<протокол>://]<адрес>[:<порт>])
//		 ИмяИБ                 - Строка   - Имя информационной базы на сервере 1С
//		 РазрешитьРегЗадания   - Булево   - Истина - разрешить запуск рег. заданий (по умолчанию: Ложь)
//  ПараметрыСУБД              - Структура
//		 ТипСУБД               - Строка   - Тип сервера СУБД ("MSSQLServer" <по умолчанию>; "PostgreSQL"; "IBMDB2"; "OracleDatabase")
//		 СерверСУБД            - Строка   - Адрес сервера СУБД
//		 ПользовательСУБД      - Строка   - Пользователь сервера СУБД
//		 ПарольСУБД            - Строка   - Пароль пользователя сервера СУБД
//		 ИмяБД                 - Строка   - Имя базы на сервере СУБД (если не указано будет использовано имя ИБ 1С)
//		 СмещениеДат           - Строка   - Смещение дат на сервере MS SQL (0; 2000 <по умолчанию>)
//		 СоздаватьБД           - Булево   - Истина - будет создана база на сервере СУБД в случае отсутствия (по умолчанию: Ложь)
//  АвторизацияВКластере       - Структура
//		 Имя                   - Строка   - Имя администратора кластера 1С
//		 Пароль                - Строка   - Пароль администратора кластера 1С
//  ОшибкаЕслиСуществует       - Булево   - Истина - Вызвать исключение если ИБ в кластере 1С существует (по умолчанию: Ложь)
//  ПутьКШаблону               - Строка   - Путь к шаблону для создания информационной базы (*.cf; *.dt).
//                                          Если шаблон не указан, то будет создана пустая ИБ
//  ИмяБазыВСписке 	           - Строка   - Имя в списке баз пользователя (если не задано, то ИБ в список не добавляется)
//
Процедура СоздатьСервернуюБазу(ПараметрыБазы1С,
	ПараметрыСУБД,
	АвторизацияВКластере,
	Знач ОшибкаЕслиСуществует = Ложь,
	Знач ПутьКШаблону = "",
	Знач ИмяБазыВСписке = "") Экспорт

	Сервер1С	= ПолучитьПараметр(ПараметрыБазы1С, "Сервер1С");
	ИмяИБ		= ПолучитьПараметр(ПараметрыБазы1С, "ИмяИБ");

	Лог.Отладка("Создание серверной ИБ ""%1\%2""", Сервер1С, ИмяИБ);

	РазрешитьРегЗадания	    = ПолучитьПараметр(ПараметрыБазы1С, "РазрешитьРегЗадания", Ложь);
	РазрешитьВыдачуЛицензий	= ПолучитьПараметр(ПараметрыБазы1С, "РазрешитьВыдачуЛицензий", Ложь);

	ТипСУБД				= ПолучитьПараметр(ПараметрыСУБД, "ТипСУБД", "MSSQLServer");
	СерверСУБД			= ПолучитьПараметр(ПараметрыСУБД, "СерверСУБД");
	ПользовательСУБД	= ПолучитьПараметр(ПараметрыСУБД, "ПользовательСУБД");
	ПарольСУБД			= ПолучитьПараметр(ПараметрыСУБД, "ПарольСУБД", "");

	ИмяБД				= ПолучитьПараметр(ПараметрыСУБД, "ИмяБД");
	Если НЕ ЗначениеЗаполнено(ИмяБД) Тогда
		ИмяБД = ИмяИБ;
		Лог.Информация("Не указано имя базы на сервере СУБД, будет использовано имя ИБ - ""%1""", ИмяБД);
	КонецЕсли;

	СмещениеДат			= ПолучитьПараметр(ПараметрыСУБД, "СмещениеДат", "2000");
	СоздаватьБД			= ПолучитьПараметр(ПараметрыСУБД, "СоздаватьБД", Ложь);

	АдминистраторКластера	= ПолучитьПараметр(АвторизацияВКластере, "Имя", Ложь);
	ПарольКластера			= ПолучитьПараметр(АвторизацияВКластере, "Пароль", Ложь);

	СтрокаЗапуска = "Srvr=" + СокрЛП(Сервер1С)
				  + ";Ref=" + СокрЛП(ИмяИБ)
				  + ";DBMS=" + СокрЛП(ТипСУБД)
				  + ";DBSrvr=" + СокрЛП(СерверСУБД)
				  + ";DBUID=" + СокрЛП(ПользовательСУБД)
				  + ";DBPwd=" + СокрЛП(ПарольСУБД)
				  + ";DB=" + СокрЛП(ИмяБД)
				  + ";SQLYOffs=" + СокрЛП(СмещениеДат)
				  + ";LicDstr=" + ?(РазрешитьВыдачуЛицензий, "Y", "N")
				  + ";CrSQLDB=" + ?(СоздаватьБД, "Y", "N")
				  + ";SchJobDn=" + ?(РазрешитьРегЗадания, "N", "Y");

	Если НЕ ПустаяСтрока(АдминистраторКластера) Тогда
		СтрокаЗапуска = СтрокаЗапуска + ";SUsr=" + АдминистраторКластера;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ПарольКластера) Тогда
		СтрокаЗапуска = СтрокаЗапуска + ";SPwd=" + ПарольКластера;
	КонецЕсли;

	Лог.Отладка("Строка запуска: %1", СтрокаЗапуска);

	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить("CREATEINFOBASE");
	ПараметрыЗапуска.Добавить(ОбернутьВКавычки(СтрокаЗапуска));

	Если мОчищатьФайлИнформации Тогда
		ПараметрыЗапуска.Добавить("/Out " + ОбернутьВКавычки(ФайлИнформации()));
	Иначе
		ПараметрыЗапуска.Добавить("/Out " + ОбернутьВКавычки(ФайлИнформации()) + " -NoTruncate");
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИмяБазыВСписке) Тогда
		ПараметрыЗапуска.Добавить("/AddInList""" + ИмяБазыВСписке + """");
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПутьКШаблону) Тогда
		ПараметрыЗапуска.Добавить("/UseTemplate""" + ПутьКШаблону + """");
	КонецЕсли;

	Если НЕ ПустаяСтрока(мКонтекстКоманды.КодЯзыка) Тогда
		ПараметрыЗапуска.Добавить("/L" + мКонтекстКоманды.КодЯзыка);
	КонецЕсли;
	Если НЕ ПустаяСтрока(мКонтекстКоманды.КодЯзыкаСеанса) Тогда
		ПараметрыЗапуска.Добавить("/VL" + мКонтекстКоманды.КодЯзыкаСеанса);
	КонецЕсли;

	СохранитьТекстФайлаИнформации();

	КодВозврата = ЗапуститьИПодождать(ПараметрыЗапуска);

	УстановитьВывод(ПрочитатьФайлИнформации());

	Если КодВозврата = 0 Тогда
		Лог.Информация("Создана серверная ИБ ""%1\%2""", Сервер1С, ИмяИБ);
	Иначе
		Если ОшибкаЕслиСуществует
			ИЛИ СтрНайти(ВРег(ВыводКоманды()), ВРег("информационная база уже существует")) = 0 Тогда
			ВызватьИсключение "Ошибка создания ИБ: """ + ВыводКоманды() + """";
		КонецЕсли;
		Лог.Информация("Информационная база ""%1\%2"" уже существует.", Сервер1С, ИмяИБ);
	КонецЕсли;

КонецПроцедуры // СоздатьСервернуюБазу()

Процедура ЗагрузитьИнформационнуюБазу(ПутьВыгрузкиИБ,
	Знач КоличествоЗаданий = 0) Экспорт

	ФайлВыгрузки = Новый Файл(ПутьВыгрузкиИБ);
	Ожидаем.Что(ФайлВыгрузки.Существует(), "Файл выгрузки <"+ПутьВыгрузкиИБ +"> существует, а это не так").ЭтоИстина();

	ПараметрыЗапуска = СтандартныеПараметрыЗапускаКонфигуратора();

	ПараметрыЗапуска.Добавить("/RestoreIB " + ОбернутьВКавычки(ПутьВыгрузкиИБ));

	Если ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.19") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("-JobsCount %1", КоличествоЗаданий));
	КонецЕсли;

	ВыполнитьКоманду(ПараметрыЗапуска);
КонецПроцедуры

Процедура ВыгрузитьИнформационнуюБазу(ПутьВыгрузкиИБ) Экспорт

	Лог.Отладка(СтрШаблон("Исходный ПутьВыгрузкиИБ %1", ПутьВыгрузкиИБ));
	ПутьВыгрузкиИБ = ОбъединитьПути(ТекущийКаталог(), ПутьВыгрузкиИБ);
	Лог.Отладка(СтрШаблон("Итоговый ПутьВыгрузкиИБ %1", ПутьВыгрузкиИБ));

	Файл = Новый Файл(ПутьВыгрузкиИБ);
	КаталогВыгрузкиИБ = Файл.Путь;

	ОбеспечитьКаталог(КаталогВыгрузкиИБ);

	ПараметрыЗапуска = СтандартныеПараметрыЗапускаКонфигуратора();

	ПараметрыЗапуска.Добавить("/DumpIB " + ОбернутьВКавычки(ПутьВыгрузкиИБ));

	ВыполнитьКоманду(ПараметрыЗапуска);

КонецПроцедуры

// Выгрузка внешней обработки или отчета в файл
//
// Параметры:
//   ПутьККаталогуВыгрузки - Строка - Путь к каталогу, в который нужно выполнить выгрузку внешнего отчета или обработки
//   ПутьКВнешнейОбработкеИлиОтчету - Строка - Путь к файлу внешнего отчета или обработки
//   Формат - РежимВыгрузкиКонфигурации - Формат выгрузки. По умолчанию используется "Hierarchical"
//
Процедура ВыгрузитьВнешниеОтчетыИлиОбработкиВФайлы(Знач ПутьККаталогуВыгрузки,
	Знач ПутьКВнешнейОбработкеИлиОтчету,
	Знач Формат = "") Экспорт

	Если НЕ ЗначениеЗаполнено(Формат) Тогда
		Формат = РежимВыгрузкиКонфигурации.Иерархический;
	КонецЕсли;

	Файл = Новый Файл(ПутьККаталогуВыгрузки);
	КаталогВыгрузки = Файл.ПолноеИмя;

	ОбеспечитьКаталог(КаталогВыгрузки);

	Файл = Новый Файл(ПутьКВнешнейОбработкеИлиОтчету);
	ПутьКВнешнейОбработкеИлиОтчету = Файл.ПолноеИмя;

	ПараметрыЗапуска = СтандартныеПараметрыЗапускаКонфигуратора();
	ПараметрыЗапуска.Добавить("/DumpExternalDataProcessorOrReportToFiles");
	ПараметрыЗапуска.Добавить(ОбернутьВКавычки(КаталогВыгрузки));
	ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ПутьКВнешнейОбработкеИлиОтчету));
	ПараметрыЗапуска.Добавить("-Format");
	ПараметрыЗапуска.Добавить(Формат);

	ВыполнитьКоманду(ПараметрыЗапуска);

КонецПроцедуры

// Выгружает конфигурацию мобильного приложения в zip-файл. Файл содержит собственно описание
// конфигурации и сопутствующие материалы
//
// Параметры:
//   ПутьКАрхиву - Строка - путь к zip-файлу
//
Процедура ВыгрузитьМобильноеПриложениеВФайл(Знач ПутьКАрхиву) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/MobileAppWriteFile """ + ПутьКАрхиву + """");
	ВыполнитьКоманду(Параметры);

КонецПроцедуры

// Выполняет обновление публикации мобильного приложения. Если публикация не была ранее
// создана - то будет выдана ошибка.
//
Процедура ОбновитьПубликациюМобильногоПриложения() Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	Параметры.Добавить("/MobileAppUpdatePublication");
	ВыполнитьКоманду(Параметры);

КонецПроцедуры

Функция ВыполнитьКоманду(Знач Параметры) Экспорт

	ПроверитьВозможностьВыполненияКоманды();

	СохранитьТекстФайлаИнформации();

	КодВозврата = ЗапуститьИПодождать(Параметры);

	УстановитьВывод(ПрочитатьФайлИнформации());

	Если КодВозврата <> 0 И мИсключениеПриОшибкеВыполненияКоманды Тогда
		Лог.Ошибка("Получен ненулевой код возврата "+КодВозврата +". Выполнение скрипта остановлено!");
		ВызватьИсключение ВыводКоманды();
	Иначе
		Лог.Отладка("Код возврата равен 0");
	КонецЕсли;

	Возврат КодВозврата;

КонецФункции

Функция ПолучитьПараметрыЗапуска() Экспорт
	Возврат СтандартныеПараметрыЗапускаКонфигуратора();
КонецФункции

Процедура ВыполнитьРасширеннуюПроверкуКонфигуратора(Ключи,
	Знач СтрокаСоединенияСХранилищем = "",
	Знач ПользовательХранилища = "",
	Знач ПарольХранилища = "") Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

	Если Не ПустаяСтрока(СтрокаСоединенияСХранилищем) Тогда
		Параметры.Добавить("/ConfigurationRepositoryF """ + СтрокаСоединенияСХранилищем + """");
		Параметры.Добавить("/ConfigurationRepositoryN """ + ПользовательХранилища + """");

		Если Не ПустаяСтрока(ПарольХранилища) Тогда
			Параметры.Добавить("/ConfigurationRepositoryP """ + ПарольХранилища + """");
		КонецЕсли;
	КонецЕсли;

	Параметры.Добавить("/CheckConfig");

	Для Каждого СтрокаКлюча Из Ключи Цикл
	    Если СтрокаКлюча.Значение = Истина Тогда
		    Параметры.Добавить(СтрокаКлюча.Ключ);
		КонецЕсли;
	КонецЦикла;

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

Процедура ВыполнитьСинтаксическийКонтроль(
			Знач ТонкийКлиент = Истина,
			Знач ВебКлиент = Истина,
			Знач Сервер = Истина,
			Знач ВнешнееСоединение = Истина,
			Знач ТолстыйКлиентОбычноеПриложение = Истина,
			Знач ИмяРасширения = Неопределено) Экспорт

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

	Параметры.Добавить("/CheckConfig");

	ДобавитьФлагПроверки(Параметры, ТонкийКлиент, "-ThinClient");
	ДобавитьФлагПроверки(Параметры, ВебКлиент, "-WebClient");
	ДобавитьФлагПроверки(Параметры, Сервер, "-Server");
	ДобавитьФлагПроверки(Параметры, ВнешнееСоединение, "-ExternalConnection");
	ДобавитьФлагПроверки(Параметры, ТолстыйКлиентОбычноеПриложение, "-ThickClientOrdinaryApplication");
	Если ИмяРасширения = "-AllExtensions" Тогда
		ДобавитьФлагПроверки(Параметры, Истина, "-AllExtensions");
	ИначеЕсли НЕ ИмяРасширения = Неопределено Тогда
		Параметры.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
	КонецЕсли;

	ВыполнитьКоманду(Параметры);

КонецПроцедуры

Функция ПроверкаКонфигурации(Проверки, ИмяРасширения = "") Экспорт

	Перем Параметры, ДопустимыеКлючи, КлючПроверки, КлючЗапуска;

	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();

	Параметры.Добавить("/CheckConfig");

	ДопустимыеКлючи = КлючиПроверкиКонфигурации();

	Для Каждого Проверка Из Проверки Цикл
		КлючПроверки = ДопустимыеКлючи.Получить(СокрЛП(Проверка));

		Если КлючПроверки <> Неопределено Тогда
			КлючЗапуска = ?(НРег(КлючПроверки) = "-extension", СтрШаблон("%1 %2", КлючПроверки, ИмяРасширения), КлючПроверки);
			Параметры.Добавить(КлючЗапуска);
		КонецЕсли;
	КонецЦикла;

	ВыполнитьКоманду(Параметры);

	Возврат Истина;
КонецФункции

Функция КлючиПроверкиКонфигурации() Экспорт

	Перем ДопустимыеКлючи;

	ДопустимыеКлючи = Новый Соответствие;
	ДопустимыеКлючи.Вставить("ПроверкаЛогическойЦелостностиКонфигурации", "-ConfigLogIntegrity");
	ДопустимыеКлючи.Вставить("ПоискНекорректныхСсылок", "-IncorrectReferences");
	ДопустимыеКлючи.Вставить("ТонкийКлиент", "-ThinClient");
	ДопустимыеКлючи.Вставить("ВебКлиент", "-WebClient");
	ДопустимыеКлючи.Вставить("Сервер", "-Server");
	ДопустимыеКлючи.Вставить("ВнешнееСоединение", "-ExternalConnection");
	ДопустимыеКлючи.Вставить("ВнешнееСоединениеКлиентСервер", "-ExternalConnectionServer");
	ДопустимыеКлючи.Вставить("МобильноеПриложениеКлиент", "-MobileAppClient");
	ДопустимыеКлючи.Вставить("МобильноеПриложениеСервер", "-MobileAppServer");
	ДопустимыеКлючи.Вставить("ТолстыйКлиентУправляемоеПриложение", "-ThickClientManagedApplication");
	ДопустимыеКлючи.Вставить("ТолстыйКлиентУправляемоеПриложениеКлиентСервер", "-ThickClientServerManagedApplication");
	ДопустимыеКлючи.Вставить("ТолстыйКлиентОбычноеПриложение", "-ThickClientOrdinaryApplication");
	ДопустимыеКлючи.Вставить("ТолстыйКлиентОбычноеПриложениеКлиентСервер", "-ThickClientServerOrdinaryApplication");
	ДопустимыеКлючи.Вставить("ПоставкаМодулейБезИсходныхТекстов", "-DistributiveModules");
	ДопустимыеКлючи.Вставить("ПоискНеиспользуемыхПроцедурИФункций", "-UnreferenceProcedures");
	ДопустимыеКлючи.Вставить("ПроверкаСуществованияНазначенныхОбработчиков", "-HandlersExistence");
	ДопустимыеКлючи.Вставить("ПоискПустыхОбработчиков", "-EmptyHandlers");
	ДопустимыеКлючи.Вставить("РасширеннаяПроверка", "-ExtendedModulesCheck");
	ДопустимыеКлючи.Вставить("ПоискИспользованияМодальности", "-CheckUseModality");
	ДопустимыеКлючи.Вставить("ПоискИспользованияСинхронныхВызовов", "-CheckUseSynchronousCalls");
	ДопустимыеКлючи.Вставить("ПоискНеподдерживаемойФункциональности", "-UnsupportedFunctional");
	ДопустимыеКлючи.Вставить("ВыполнитьЗаданныеПроверкиДляВсехРасширений", "-AllExtensions");
	ДопустимыеКлючи.Вставить("ВыполнитьЗаданныеПроверкиДляУказанногоРасширения", "-Extension");

	ДопустимыеКлючи.Вставить("ЛогическаяЦелостность", "-ConfigLogIntegrity");
	ДопустимыеКлючи.Вставить("НекорректныеСсылки", "-IncorrectReferences");
	ДопустимыеКлючи.Вставить("ВнешнееСоединениеСервер", "-ExternalConnectionServer");
	ДопустимыеКлючи.Вставить("ТолстыйКлиентУправляемоеПриложениеСервер", "-ThickClientServerManagedApplication");
	ДопустимыеКлючи.Вставить("ТолстыйКлиент", "-ThickClientOrdinaryApplication");
	ДопустимыеКлючи.Вставить("ТолстыйКлиентСервер", "-ThickClientServerOrdinaryApplication");
	ДопустимыеКлючи.Вставить("МодулиБезИсходныхТекстов", "-DistributiveModules");
	ДопустимыеКлючи.Вставить("НеиспользуемыеПроцедурыИФункции", "-UnreferenceProcedures");
	ДопустимыеКлючи.Вставить("НазначенныеОбработчики", "-HandlersExistence");
	ДопустимыеКлючи.Вставить("ПустыеОбработчики", "-EmptyHandlers");
	ДопустимыеКлючи.Вставить("ИспользованиеМодальности", "-CheckUseModality");
	ДопустимыеКлючи.Вставить("ИспользованиеСинхронныхВызовов", "-CheckUseSynchronousCalls");
	ДопустимыеКлючи.Вставить("НеподдерживаемаяФункциональность", "-UnsupportedFunctional");
	ДопустимыеКлючи.Вставить("ВсеРасширения", "-AllExtensions");
	ДопустимыеКлючи.Вставить("Расширение", "-Extension");

	ДопустимыеКлючи.Вставить("ConfigLogIntegrity", "-ConfigLogIntegrity");
	ДопустимыеКлючи.Вставить("IncorrectReferences", "-IncorrectReferences");
	ДопустимыеКлючи.Вставить("ThinClient", "-ThinClient");
	ДопустимыеКлючи.Вставить("WebClient", "-WebClient");
	ДопустимыеКлючи.Вставить("Server", "-Server");
	ДопустимыеКлючи.Вставить("ExternalConnection", "-ExternalConnection");
	ДопустимыеКлючи.Вставить("ExternalConnectionServer", "-ExternalConnectionServer");
	ДопустимыеКлючи.Вставить("MobileAppClient", "-MobileAppClient");
	ДопустимыеКлючи.Вставить("MobileAppServer", "-MobileAppServer");
	ДопустимыеКлючи.Вставить("ThickClientManagedApplication", "-ThickClientManagedApplication");
	ДопустимыеКлючи.Вставить("ThickClientServerManagedApplication", "-ThickClientServerManagedApplication");
	ДопустимыеКлючи.Вставить("ThickClientOrdinaryApplication", "-ThickClientOrdinaryApplication");
	ДопустимыеКлючи.Вставить("ThickClientServerOrdinaryApplication", "-ThickClientServerOrdinaryApplication");
	ДопустимыеКлючи.Вставить("DistributiveModules", "-DistributiveModules");
	ДопустимыеКлючи.Вставить("UnreferenceProcedures", "-UnreferenceProcedures");
	ДопустимыеКлючи.Вставить("HandlersExistence", "-HandlersExistence");
	ДопустимыеКлючи.Вставить("EmptyHandlers", "-EmptyHandlers");
	ДопустимыеКлючи.Вставить("ExtendedModulesCheck", "-ExtendedModulesCheck");
	ДопустимыеКлючи.Вставить("CheckUseModality", "-CheckUseModality");
	ДопустимыеКлючи.Вставить("CheckUseSynchronousCalls", "-CheckUseSynchronousCalls");
	ДопустимыеКлючи.Вставить("UnsupportedFunctional", "-UnsupportedFunctional");
	ДопустимыеКлючи.Вставить("AllExtensions", "-AllExtensions");
	ДопустимыеКлючи.Вставить("Extension", "-Extension");

	Возврат ДопустимыеКлючи;
КонецФункции

Процедура ЗапуститьВРежимеПредприятия(Знач КлючЗапуска = "", Знач УправляемыйРежим = Неопределено, Знач ДополнительныеКлючи = Неопределено) Экспорт
	ПараметрыСвязиСБазой = ПолучитьПараметрыЗапуска();
	ПараметрыСвязиСБазой[0] = "ENTERPRISE";
	Если Не ПустаяСтрока(КлючЗапуска) Тогда
		ПараметрыСвязиСБазой.Добавить("/C" + ОбернутьВКавычки(КлючЗапуска));
	КонецЕсли;
	Если УправляемыйРежим = Истина Тогда
		ПараметрыСвязиСБазой.Вставить(2, "/RunModeManagedApplication");
	ИначеЕсли УправляемыйРежим = Ложь Тогда
		ПараметрыСвязиСБазой.Вставить(2, "/RunModeOrdinaryApplication");
	КонецЕсли;

	Если ДополнительныеКлючи <> Неопределено Тогда
		ПараметрыСвязиСБазой.Добавить(ДополнительныеКлючи);
	КонецЕсли;

	ВыполнитьКоманду(ПараметрыСвязиСБазой);

КонецПроцедуры

Процедура ДобавитьФлагПроверки(Знач Параметры, Знач ФлагПроверки, Знач ИмяФлага)

	Если ФлагПроверки Тогда
		Параметры.Добавить(ИмяФлага);
	КонецЕсли;

КонецПроцедуры

Функция КаталогСодержитФайлОбновления(Знач КаталогВерсии)

	ФайлОбновления = Новый Файл(ОбъединитьПути(КаталогВерсии, "1cv8.cfu"));
	Возврат ФайлОбновления.Существует();

КонецФункции

Функция ПутьКВременнойБазе() Экспорт
	Возврат ОбъединитьПути(КаталогСборки(), "v8r_TempDB");
КонецФункции

#КонецОбласти

#Область ВспомогательныеФункции

Функция ПолучитьПутьКВерсииПлатформы(Знач ВерсияПлатформы, Знач Разрядность = Неопределено) Экспорт

	Если Лев(ВерсияПлатформы, 2) <> "8." Тогда
		ВызватьИсключение "Неверная версия платформы <"+ ВерсияПлатформы + ">";
	КонецЕсли;

	Результат = Платформа1С.ПутьКПредприятию(ВерсияПлатформы, Разрядность);

	Возврат Результат;

КонецФункции

Процедура УстановитьКлючРазрешенияЗапуска(Знач Ключ) Экспорт
	мКонтекстКоманды.КлючРазрешенияЗапуска = Ключ;
КонецПроцедуры

Процедура УстановитьКодЯзыка(Знач Код) Экспорт
	мКонтекстКоманды.КодЯзыка = Код;
	Если ПустаяСтрока(мКонтекстКоманды.КодЯзыкаСеанса) Тогда
		мКонтекстКоманды.КодЯзыкаСеанса = Код;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьКодЯзыкаСеанса(Знач Код) Экспорт
	мКонтекстКоманды.КодЯзыкаСеанса = Код;
КонецПроцедуры

Функция ВыводКоманды() Экспорт
	Возврат мВыводКоманды;
КонецФункции

Функция КаталогСборки(Знач Каталог = "") Экспорт

	Если мКаталогСборки = Неопределено Тогда
		мКаталогСборки = ТекущийКаталог();
	КонецЕсли;

	Если Каталог = "" Тогда
		Возврат мКаталогСборки;
	Иначе
		ТекКаталог = мКаталогСборки;
		мКаталогСборки = Каталог;
		Возврат ТекКаталог;
	КонецЕсли;

КонецФункции

Функция ПутьКПлатформе1С(Знач Путь = "") Экспорт

	Если Путь <> "" Тогда
		ФайлПлатформы = Новый Файл(Путь);
		Если Не ФайлПлатформы.Существует() Тогда
			ВызватьИсключение "Нельзя установить несуществующий путь к платформе: " + ФайлПлатформы.ПолноеИмя;
		КонецЕсли;

		мПутьКПлатформе1С = Путь;

		мВерсияПлатформы = "";
		ШаблонВерсии = Новый РегулярноеВыражение("8(\.\d+){3}");
		ВсеСовпадения = ШаблонВерсии.НайтиСовпадения(ФайлПлатформы.ПолноеИмя);
		Если ВсеСовпадения.Количество() <> 0 Тогда
			мВерсияПлатформы = ВсеСовпадения[ВсеСовпадения.Количество()-1].Значение;
		КонецЕсли;

	КонецЕсли;

	Возврат мПутьКПлатформе1С;

КонецФункции

Функция ИспользоватьВерсиюПлатформы(Знач МаскаВерсии, Знач Разрядность = Неопределено) Экспорт
	Путь = ПолучитьПутьКВерсииПлатформы(МаскаВерсии, Разрядность);
	Возврат ПутьКПлатформе1С(Путь);
КонецФункции

Функция ПутьКТонкомуКлиенту1С(Знач ПутьКПлатформе1С = "") Экспорт
	Лог.Отладка("ПутьКТонкомуКлиенту1С: Путь платформы 1С <"+ПутьКПлатформе1С + ">");
	Если ПутьКПлатформе1С = "" Тогда
		ПутьКПлатформе1С = ПутьКПлатформе1С();
		Лог.Отладка("ПутьКТонкомуКлиенту1С: вычислили Путь платформы 1С <"+ПутьКПлатформе1С + ">");
	КонецЕсли;

	ФайлПриложения = Новый Файл(ПутьКПлатформе1С);
	Каталог = ФайлПриложения.Путь;
	ИмяФайлаТонкогоКлиента = ?(ЭтоWindows = Истина, "1cv8c.exe", "1cv8c");
	ФайлПриложения = Новый Файл(ОбъединитьПути(Каталог, ИмяФайлаТонкогоКлиента));
	Если Не ФайлПриложения.Существует() Тогда
		ВызватьИсключение "Не установлен тонкий клиент";
	КонецЕсли;

	Лог.Отладка("ПутьКТонкомуКлиенту1С: получили путь к тонкому клиенту 1С <"+ФайлПриложения.ПолноеИмя + ">");
	Возврат ФайлПриложения.ПолноеИмя;

КонецФункции

// Функция - Возвращает путь к каталогу с конфигурационными файлами 1С
//
// Параметры:
//  ПутьКПлатформе1С     - Строка - Полный путь к платформе 1С,
//                 					например, C:\Program Files\1cv8\8.3.17.1386\bin\1cv8.exe
//  ПутьКОбщимНастройкам - Булево - Если требуется получить путь к каталогу с общими настройками - Истина.
//									Если путь к каталогу определенной версии - Ложь, по умолчанию - Истина.
//
// Возвращаемое значение:
//   Строка - Полный пути к каталогу содержащему конфигурационные файлы платформы, например, C:\Program Files\1cv8\conf
//
Функция КаталогКонфигурационныхФайлов1С(Знач ПутьКПлатформе1С = "", Знач ПутьКОбщимНастройкам = Истина) Экспорт

	Лог.Отладка("КаталогКонфигурационныхФайлов1С: Путь платформы 1С <"+ ПутьКПлатформе1С + ">");
	Если ПутьКПлатформе1С = "" Тогда
		ПутьКПлатформе1С = ПутьКПлатформе1С();
		Лог.Отладка("КаталогКонфигурационныхФайлов1С: вычислили Путь платформы 1С <"+ ПутьКПлатформе1С + ">");
	КонецЕсли;

	КаталогНаДиске = Новый Файл(ПутьКПлатформе1С);
	Если Не КаталогНаДиске.Существует() Тогда
		ВызватьИсключение "Не существует установленной платформы 1С по пути: " + ПутьКПлатформе1С;
	КонецЕсли;

	ВерсияПлатформы = "";
	ШаблонВерсии = Новый РегулярноеВыражение("8(\.\d+){3}");
	ВсеСовпадения = ШаблонВерсии.НайтиСовпадения(ПутьКПлатформе1С);
	Если ВсеСовпадения.Количество() <> 0 Тогда
		ВерсияПлатформы = ВсеСовпадения[ВсеСовпадения.Количество()-1].Значение;
	КонецЕсли;

	ВидПути = ?(ПутьКОбщимНастройкам, "(Общий)", "(Для текущей версии)");
	Если ПутьКОбщимНастройкам Тогда
		КаталогКонфигурационныхФайлов1С = СтрЗаменить(ПутьКПлатформе1С, "\" + ВерсияПлатформы + "\bin\1cv8.exe", "\conf");
	Иначе
		КаталогКонфигурационныхФайлов1С = СтрЗаменить(ПутьКПлатформе1С, "\1cv8.exe", "\conf");
	КонецЕсли;
	Лог.Отладка("КаталогКонфигурационныхФайлов1С: получили путь конфигурационных файлов 1С " + ВидПути + " <" + КаталогКонфигурационныхФайлов1С + ">");

	Возврат КаталогКонфигурационныхФайлов1С;

КонецФункции

//  Установка файла для вывода служебных сообщений. Если задан параметр ОчищатьФайл=Ложь, файл не очищается.
//
// Параметры:
//  ПолныйПутьКФайлу - Строка - Полный путь к файлу, например, g:\temp\1c.log
//  ОчищатьФайл      - Булево - Если Истина, то перед операцией файл будет удаляться, иначе будет происходить дозапись
//
Процедура УстановитьИмяФайлаСообщенийПлатформы(Знач ПолныйПутьКФайлу, Знач ОчищатьФайл = Истина) Экспорт
	мИмяФайлаИнформации = ПолныйПутьКФайлу; // если будет абс. путь, то ОбъединитьПути отработает корректно.
	мФайлИнформацииВнешний = Истина;
	мОчищатьФайлИнформации = ОчищатьФайл;
КонецПроцедуры

Процедура УдалитьВременнуюБазу() Экспорт

	Если ВременнаяБазаСуществует() Тогда
		КаталогВременнойБазы = ПутьКВременнойБазе();
		Лог.Отладка("Удаляю временную базу: "+КаталогВременнойБазы);
		УдалитьФайлы(КаталогВременнойБазы);
	КонецЕсли;

КонецПроцедуры

// УстановитьПризнакОжиданияВыполненияПрограммы
//
// Параметры:
//   НовыйПризнак - <Булево> - Новое значение признака
//
//  Возвращаемое значение:
//   <Булево> - прежнее значение признака
//
Функция УстановитьПризнакОжиданияВыполненияПрограммы(НовыйПризнак) Экспорт

	Ожидаем.Что(НовыйПризнак = Ложь ИЛИ НовыйПризнак = Истина,
		"Параметр ""Признак ожидания выполнения программы 1С"" должен быть или Истина или Ложь, а это не так").ЭтоИстина();

	СтарыйПризнак = мПризнакОжиданияВыполненияПрограммы;
	мПризнакОжиданияВыполненияПрограммы = НовыйПризнак;

	Возврат СтарыйПризнак;

КонецФункции // УстановитьРежимОжиданияВыполненияПрограммы() Экспорт

// ИсключениеПриОшибкеВыполненияКоманды
//
// Параметры:
//   НовоеЗначение - <Булево> - Новое значение флага "ИсключениеПриОшибкеВыполненияКоманды"
//								если не указано, то возвращается текущее значение
//
//  Возвращаемое значение:
//   <Булево> - значение признака
//
Функция ИсключениеПриОшибкеВыполненияКоманды(НовоеЗначение = Неопределено) Экспорт

	Ожидаем.Что(НовоеЗначение = Ложь ИЛИ НовоеЗначение = Истина ИЛИ НовоеЗначение = Неопределено,
		"Параметр ""Исключение при ошибке выполнения команды"" должен быть или Истина, Ложь или Неопределено, а это не так").ЭтоИстина();

	Если НЕ НовоеЗначение = Неопределено Тогда
		мИсключениеПриОшибкеВыполненияКоманды = НовоеЗначение;
	КонецЕсли;

	Возврат мИсключениеПриОшибкеВыполненияКоманды;

КонецФункции // ИсключениеПриОшибкеВыполненияКоманды() Экспорт

// Формирует отчёт о сравнении основной конфигурации\конфигурации расширения в файл.
//
// Параметры:
//   ПутьКФайлуКонфигурации - Строка - Путь к файлу cf/cfe, с которым необходимо произвести сравнение
//   ПутьКОтчету - Строка - Путь в который необходимо записать отчёт
//   ТипОтчета - ТипыОтчетовОСравнении - Тип отчёта о сравнении полный или краткий
//   ФорматОтчета - Строка - Формат файла отчета. Возмодные значения: txt, mxl
//   ИмяРасширения - Строка - Имя расширения конфигурации
//   ПутьКФайлуПервойКонфигурации - Строка - Путь к файлу cf/cfe вместо использования основной конфигурации
//
Процедура ПолучитьОтчетОСравненииКонфигурацииСФайлом(
	Знач ПутьКФайлуКонфигурации,
	Знач ПутьКОтчету,
	Знач ТипОтчета = Неопределено,
	Знач ФорматОтчета = "txt",
	Знач ИмяРасширения = "",
	Знач ПутьКФайлуПервойКонфигурации = Неопределено) Экспорт

	Если ТипОтчета = Неопределено Тогда
		ТипОтчета = ТипыОтчетовОСравнении.Полный;
	КонецЕсли;

	ПараметрыЗапуска = СтандартныеПараметрыЗапускаКонфигуратора();
	ПараметрыЗапуска.Добавить("/CompareCfg");

	Если ЗначениеЗаполнено(ИмяРасширения) Тогда
		ПараметрыЗапуска.Добавить("-FirstConfigurationType ExtensionConfiguration");
		Если ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.12") Тогда
			КлючИмяРасширения = "-FirstName";
		Иначе
			КлючИмяРасширения = "-FirstConfigurationKey";
		КонецЕсли;
		ПараметрыЗапуска.Добавить(СтрШаблон("%1 %2", КлючИмяРасширения, ИмяРасширения));

	ИначеЕсли ПутьКФайлуПервойКонфигурации <> Неопределено Тогда
		ПараметрыЗапуска.Добавить("-FirstConfigurationType File");

		Если ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.12") Тогда
			КлючПутьКПервомуФайлу = "-FirstFile";
		Иначе
			КлючПутьКПервомуФайлу = "-FirstConfigurationKey";
		КонецЕсли;
		ПараметрыЗапуска.Добавить(СтрШаблон("%1 %2",
			КлючПутьКПервомуФайлу, ОбернутьВКавычки(ПутьКФайлуПервойКонфигурации)));

	Иначе
		ПараметрыЗапуска.Добавить("-FirstConfigurationType MainConfiguration");
	КонецЕсли;

	ПараметрыЗапуска.Добавить("-SecondConfigurationType File");

	Если ИспользуемаяВерсияПлатформыСтаршеИлиРавна("8.3.12") Тогда
		КлючПутьКФайлуСравнения = "-SecondFile";
	Иначе
		КлючПутьКФайлуСравнения = "-SecondConfigurationKey";
	КонецЕсли;

	ПараметрыЗапуска.Добавить(СтрШаблон("%1 %2",
		КлючПутьКФайлуСравнения, ОбернутьВКавычки(ПутьКФайлуКонфигурации)));

	ПараметрыЗапуска.Добавить(СтрШаблон("-ReportType %1", ТипОтчета));

	ПараметрыЗапуска.Добавить(СтрШаблон("-ReportFormat %1", ФорматОтчета));

	ПараметрыЗапуска.Добавить(СтрШаблон("-ReportFile %1", ОбернутьВКавычки(ПутьКОтчету)));

	ВыполнитьКоманду(ПараметрыЗапуска);

КонецПроцедуры

// Функция проверяет что основная конфигурация\конфигурация расширения идентична с файлом
//
// Параметры:
//   ПутьКФайлуКонфигурации - Строка - Путь к файлу cf/cfe с которым необходимо произвести сравнение
//   ИмяРасширения - Строка - Имя расширения конфигурации
//
//  Возвращаемое значение:
//   Булево - Истина - конфигурации идентичны.
//
Функция КонфигурацияИФайлИдентичны(Знач ПутьКФайлуКонфигурации, Знач ИмяРасширения = "") Экспорт

	ЭталонОтчетаБезИзменений = НСтр(
		"ru = '
		|***- Объект изменен
		|-->- Объект присутствует только в %1 конфигурации
		|<--- Объект присутствует только в файле
		|^- Порядок объекта изменен'
		|;
		|en = '
		|***- Object changed
		|-->- Object available only in the %1
		|<--- Object available only in the file
		|^- Object order changed'",
		мКонтекстКоманды.КодЯзыкаСеанса
	);

	Если ЗначениеЗаполнено(ИмяРасширения) Тогда
		СтрокаДополнения = НСтр("ru = 'расширении'; en = 'configuration extension'", мКонтекстКоманды.КодЯзыкаСеанса);
	Иначе
		СтрокаДополнения = НСтр("ru = 'основной'; en = 'main configuration'", мКонтекстКоманды.КодЯзыкаСеанса);
	КонецЕсли;

	ОтчетБезИзменений = СтрШаблон(
		ЭталонОтчетаБезИзменений,
		СтрокаДополнения
	);

	Лог.Отладка("Сформировал эталон отчета о сравнении: " + ОтчетБезИзменений);

	ПутьКФайлуОтчета = ПолучитьИмяВременногоФайла(".txt");

	Лог.Отладка("Формирую отчет о сравнении конфигураций");

	ПолучитьОтчетОСравненииКонфигурацииСФайлом(
		ПутьКФайлуКонфигурации,
		ПутьКФайлуОтчета,
		ТипыОтчетовОСравнении.Краткий,
		"txt",
		ИмяРасширения
	);

	ФайлОтчета = Новый Файл(ПутьКФайлуОтчета);

	Если ФайлОтчета.Существует() Тогда

		Лог.Отладка("Нашёл файл отчета о сранении. Читаю файл.");

		ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуОтчета);
		СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
		Отчет        = "";

		Пока СтрокаТекста <> Неопределено Цикл

			Если Не ПустаяСтрока(СтрокаТекста) Тогда
				Отчет    = Отчет + Символы.ПС + СокрЛП(СтрокаТекста);
			КонецЕсли;

			СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
		КонецЦикла;

		ЧтениеТекста.Закрыть();

		Лог.Отладка("Прочитал файл отчета о сравнении: " + Отчет);

		Попытка
			Лог.Отладка("Удаляю файл отчёта 1С");
			УдалитьФайлы(ФайлОтчета.ПолноеИмя);
		Исключение
			Лог.Предупреждение("Не удалось удалить файл отчёта: " + ОписаниеОшибки());
		КонецПопытки;

		Возврат Отчет = ОтчетБезИзменений;

	Иначе
		Лог.Ошибка("Не сформирован файл сравнения конфигураций");
	КонецЕсли;

	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует базовые параметры для запуска конфигуратора методом ВыполнитьКоманду()
// Пример использования:
//   Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
//   Параметры.Добавить("/МойПараметр");
//   ВыполнитьКоманду(Параметры);
//
// Возвращаемое значение:
//   Массив - параметры запуска
//
Функция СтандартныеПараметрыЗапускаКонфигуратора() Экспорт

	Лог.Отладка("КлючСоединенияСБазой "+КлючСоединенияСБазой());
	Лог.Отладка("ИмяПользователя <"+мКонтекстКоманды.ИмяПользователя + ">");

	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить("DESIGNER");
	ПараметрыЗапуска.Добавить(КлючСоединенияСБазой());

	Если мОчищатьФайлИнформации Тогда
		ПараметрыЗапуска.Добавить("/Out " + ОбернутьВКавычки(ФайлИнформации()));
	Иначе
		ПараметрыЗапуска.Добавить("/Out " + ОбернутьВКавычки(ФайлИнформации()) + " -NoTruncate");
	КонецЕсли;

	Если Не ПустаяСтрока(мКонтекстКоманды.ИмяПользователя) Тогда
		ПараметрыЗапуска.Добавить("/N" + ОбернутьВКавычки(мКонтекстКоманды.ИмяПользователя));
	КонецЕсли;
	Если Не ПустаяСтрока(мКонтекстКоманды.Пароль) Тогда
		ПараметрыЗапуска.Добавить("/P" + ОбернутьВКавычки(мКонтекстКоманды.Пароль));
	КонецЕсли;
	Если ПустаяСтрока(мКонтекстКоманды.ИмяПользователя) Тогда
		ПараметрыЗапуска.Добавить("/WA+");
	КонецЕсли;
	Если Не ПустаяСтрока(мКонтекстКоманды.КлючРазрешенияЗапуска) Тогда
		ПараметрыЗапуска.Добавить("/UC" + ОбернутьВКавычки(мКонтекстКоманды.КлючРазрешенияЗапуска));
	КонецЕсли;
	Если НЕ ПустаяСтрока(мКонтекстКоманды.КодЯзыка) Тогда
		ПараметрыЗапуска.Добавить("/L" + мКонтекстКоманды.КодЯзыка);
	КонецЕсли;
	Если НЕ ПустаяСтрока(мКонтекстКоманды.КодЯзыкаСеанса) Тогда
		ПараметрыЗапуска.Добавить("/VL" + мКонтекстКоманды.КодЯзыкаСеанса);
	КонецЕсли;
	ПараметрыЗапуска.Добавить("/DisableStartupMessages");
	ПараметрыЗапуска.Добавить("/DisableStartupDialogs");

	Возврат ПараметрыЗапуска;

КонецФункции

Процедура ПроверитьВозможностьВыполненияКоманды()

	Если Не ЗначениеЗаполнено(ПутьКПлатформе1С()) Тогда
		ВызватьИсключение "Не задан путь к платформе 1С";
	КонецЕсли;

	Лог.Отладка("Проверяю равенство КлючСоединенияСБазой() = КлючВременногоКонтекста() и Не ВременнаяБазаСуществует()");
	Лог.Отладка("КлючСоединенияСБазой() "+КлючСоединенияСБазой());
	Лог.Отладка("КлючВременногоКонтекста() "+КлючВременногоКонтекста());
	Лог.Отладка("ВременнаяБазаСуществует() "+ВременнаяБазаСуществует());

	Если КлючСоединенияСБазой() = КлючВременногоКонтекста() И Не ВременнаяБазаСуществует() Тогда
		Лог.Отладка("Равенство выполняется.");
		СоздатьВременнуюБазу();
	Иначе
		Лог.Отладка("Равенство не выполняется.");
	КонецЕсли;

КонецПроцедуры

Функция КлючСоединенияСБазой()
	Если ПустаяСтрока(мКонтекстКоманды.КлючСоединенияСБазой) Тогда
		Возврат КлючВременногоКонтекста();
	Иначе
		Возврат мКонтекстКоманды.КлючСоединенияСБазой;
	КонецЕсли;
КонецФункции

Процедура СоздатьВременнуюБазу()

	КаталогВременнойБазы = ПутьКВременнойБазе();
	Лог.Отладка("Создаю временную базу. Путь "+КаталогВременнойБазы);

	СоздатьФайловуюБазу(КаталогВременнойБазы);

КонецПроцедуры

// При запуска в режиме предприятия часто приложение GUI возвращает в оболочку ОК сразу после старта (а не после завершения)
//
// Параметры:
//   ОбъектОбработчик - Объект с экспортным методом ОбработкаОжиданияПроцесса(Отказ, Интервал)
//   Интервал - Интервал ожидания (мс), через который вызывается ОбработкаОжиданияПроцесса, если он не завершен
//
Процедура УстановитьОбработчикОжидания(Знач ОбъектОбработчик, Знач Интервал = 5000) Экспорт

	мОбработчикОжиданияПроцессаGUI = Новый Структура;
	мОбработчикОжиданияПроцессаGUI.Вставить("Объект", ОбъектОбработчик);
	мОбработчикОжиданияПроцессаGUI.Вставить("Интервал", Интервал);

КонецПроцедуры

Функция ЗапуститьИПодождать(Знач Параметры)

	СтрокаЗапуска = "";
	СтрокаДляЛога = "";
	Для Каждого Параметр Из Параметры Цикл

		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;

		Если Лев(Параметр, 2) <> "/P" И Лев(Параметр, 25) <> "/ConfigurationRepositoryP" Тогда
			СтрокаДляЛога = СтрокаДляЛога + " " + Параметр;
		КонецЕсли;

	КонецЦикла;

	КодВозврата = 0;

	Приложение = ОбернутьВКавычки(ПутьКПлатформе1С());
	Лог.Отладка(Приложение + СтрокаДляЛога);

	Если ЭтоWindows = Ложь Тогда
		СтрокаЗапуска = "sh -c '"+Приложение + СтрокаЗапуска + "'";
	Иначе
		СтрокаЗапуска = Приложение + СтрокаЗапуска;
	КонецЕсли;

	Если мОбработчикОжиданияПроцессаGUI = Неопределено Тогда
		Если мПризнакОжиданияВыполненияПрограммы Тогда
			Команда = Новый Команда;

			Команда.УстановитьКоманду(Приложение);
			Команда.УстановитьКодировкуВывода(КодировкаТекста.UTF8);
			Команда.ДобавитьЛогВыводаКоманды("oscript.lib.v8runner");
			Команда.ДобавитьПараметры(Параметры);
			Команда.УстановитьИсполнениеЧерезКомандыСистемы(Ложь);
			Команда.ПоказыватьВыводНемедленно(Ложь);
			КодВозврата = Команда.Исполнить();
		Иначе

			ЗапуститьПриложение(СтрокаЗапуска, , Ложь, КодВозврата);

		КонецЕсли;

	Иначе

		ЗапуститьПроцессGUI(СтрокаЗапуска, КодВозврата);

	КонецЕсли;
	Лог.Отладка("Получен код возврата %1", КодВозврата);

	Возврат КодВозврата;

КонецФункции

Процедура ЗапуститьПроцессGUI(Знач СтрокаЗапуска, КодВозврата)

	Процесс = СоздатьПроцесс(СтрокаЗапуска);
	Процесс.Запустить();

	Лог.Отладка("Стартовал процесс в режиме GUI, PID:%1", Процесс.Идентификатор);
	Приостановить(3000); // инициализация 1С

	Пока Не Процесс.Завершен Цикл

		Если мОбработчикОжиданияПроцессаGUI.Интервал > 0 Тогда
			Лог.Отладка("Пауза %1 секунд", мОбработчикОжиданияПроцессаGUI.Интервал);
			Приостановить(мОбработчикОжиданияПроцессаGUI.Интервал);
		КонецЕсли;

		Отказ = Ложь;
		Лог.Отладка("Вызов обработчика ожидания");
		Попытка
			мОбработчикОжиданияПроцессаGUI.Объект.ОбработкаОжиданияПроцесса(Отказ, мОбработчикОжиданияПроцессаGUI.Интервал);
		Исключение
			Лог.Отладка(ОписаниеОшибки());
			ВызватьИсключение;
		КонецПопытки;

		Если Отказ = Истина Тогда
			КодВозврата = -1;
			Лог.Отладка("Получен отказ");
			Возврат;
		КонецЕсли;

	КонецЦикла;

	Лог.Отладка("Процесс завершен.");
	КодВозврата = Процесс.КодВозврата;

КонецПроцедуры

Функция ПрочитатьФайлИнформации()

	Текст = "";

	Файл = Новый Файл(ФайлИнформации());
	Если Файл.Существует() Тогда
		Попытка
			Чтение = Новый ЧтениеТекста(Файл.ПолноеИмя);
		Исключение
			Лог.Предупреждение("Не удалось прочитать файл информации %1.
			|" + ОписаниеОшибки(), Файл.ПолноеИмя);

			Возврат "";
		КонецПопытки;

		Текст = Чтение.Прочитать();
		Чтение.Закрыть();

		Лог.Отладка("Это внешний файл информации: " + мФайлИнформацииВнешний );
		Лог.Отладка("Очищать файл информации: " + мОчищатьФайлИнформации );

		Если Не мФайлИнформацииВнешний
			И мОчищатьФайлИнформации Тогда
			УдалитьФайлИнформации();
		КонецЕсли;

	Иначе
		Текст = "Информации об ошибке нет";
	КонецЕсли;

	Лог.Отладка("файл информации:
	|" + Текст);
	Возврат Текст;
КонецФункции

Процедура УдалитьФайлИнформации()

	Файл = Новый Файл(ФайлИнформации());
	Если Файл.Существует() Тогда
		Попытка
			Лог.Отладка("Удаляю файл информации 1С");
			УдалитьФайлы(Файл.ПолноеИмя);
		Исключение
			Лог.Предупреждение("Не удалось удалить файл информации: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьВывод(Знач Сообщение)
	Если мОчищатьФайлИнформации
		ИЛИ Не ЗначениеЗаполнено( мТекстФайлаДоВывода ) Тогда
		мВыводКоманды = Сообщение;
	Иначе
		мВыводКоманды = СокрЛП( СтрЗаменить( Сообщение, мТекстФайлаДоВывода, "" ));
		Лог.Отладка("Вывод при дописываемом файле: " + мВыводКоманды);
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьТекстФайлаИнформации()

	Если мОчищатьФайлИнформации Тогда
		мТекстФайлаДоВывода = "";
	Иначе
		мТекстФайлаДоВывода = ПрочитатьФайлИнформации();
	КонецЕсли;

КонецПроцедуры

Функция ФайлИнформации() Экспорт

	Если мФайлИнформацииВнешний Тогда
		Возврат мИмяФайлаИнформации;
	КонецЕсли;

	Если мИмяФайлаИнформации = Неопределено Тогда
		выделенныйВременныйФайл = ПолучитьИмяВременногоФайла("txt");
		указательНаВременныйФайл = Новый Файл(выделенныйВременныйФайл);
		мИмяФайлаИнформации = указательНаВременныйФайл.Имя;
		указательНаВременныйФайл = "";
	КонецЕсли;

	Возврат ОбъединитьПути(КаталогСборки(), мИмяФайлаИнформации);
КонецФункции

Процедура ОбеспечитьКаталог(Знач Каталог)

	Файл = Новый Файл(Каталог);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Каталог);
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		ВызватьИсключение "Каталог " + Каталог + " не является каталогом";
	КонецЕсли;

КонецПроцедуры

Функция КлючВременногоКонтекста()
	Возврат "/F""" + ПутьКВременнойБазе() + """";
КонецФункции

Функция ВременнаяБазаСуществует() Экспорт
	ФайлБазы = Новый Файл(ОбъединитьПути(ПутьКВременнойБазе(), "1Cv8.1CD"));

	Возврат ФайлБазы.Существует();
КонецФункции

Функция ОбернутьВКавычки(Знач Строка)
	Если Лев(Строка, 1) = """" И Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

// Пполучает значение параметра из структуры
//
// Параметры:
//   Параметры             - Структура      - Структура, содержащая значения параметров
//   Имя                   - Строка         - Имя параметра
//   ЗначениеПоУмолчанию   - Произвольный   - Значение параметра по умолчанию
//                                            (возвращается если в структуре параметров значение по указанному имени не найдено)
//                                            (по умолчанию "")
// Возвращаемое значение:
//   Произвольный     - Значение параметра
//
Функция ПолучитьПараметр(Параметры, Имя, ЗначениеПоУмолчанию = "")

	ЗначениеПараметра = ЗначениеПоУмолчанию;

	Если Параметры.Свойство(Имя) Тогда
		ЗначениеПараметра = Параметры[Имя];
	КонецЕсли;

	Возврат ЗначениеПараметра;

КонецФункции // ПолучитьПараметр()

Процедура Инициализация()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;
	мВерсияПлатформы = "";

	мКонтекстКоманды = Новый Структура;
	мКонтекстКоманды.Вставить("КлючСоединенияСБазой", "");
	мКонтекстКоманды.Вставить("ИмяПользователя", "");
	мКонтекстКоманды.Вставить("Пароль", "");
	мКонтекстКоманды.Вставить("КлючРазрешенияЗапуска", "");
	мКонтекстКоманды.Вставить("КодЯзыка", "");
	мКонтекстКоманды.Вставить("КодЯзыкаСеанса", "");


	ПутьКПлатформе1С(ПолучитьПутьКВерсииПлатформы("8.3", РазрядностьПлатформы.x64x86));

	мОчищатьФайлИнформации = Истина;
	мФайлИнформацииВнешний = Ложь;
	мПризнакОжиданияВыполненияПрограммы = Истина;
	мИсключениеПриОшибкеВыполненияКоманды = Истина;

КонецПроцедуры

Функция СкопироватьСтруктуру(Знач Источник)

	Копия = Новый Структура;
	Для Каждого КлючИЗначение Из Источник Цикл
		Копия.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

	Возврат Копия;

КонецФункции


// Метод устарел (используйте ЗагрузитьКонфигурациюИзХранилища())
// Выполняет загрузку конфигурации из хранилища конфигурации определенной версии, если задана, иначе получает последнюю версию.
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищу конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищу конфигурации
//  НомерВерсии  		  - Число -  Номер версии в истории в хранилище конфигурации, если 0 или меньше, то берется последняя версия.
//
Процедура ПолучитьИзмененияКонфигурацииБазыДанныхИзХранилища(Знач СтрокаСоединения, Знач ПользовательХранилища, Знач ПарольХранилища = "", Знач НомерВерсииХранилища = 0) Экспорт

	Сообщить("ВНИМАНИЕ: метод ""ПолучитьИзмененияКонфигурацииБазыДанныхИзХранилища()"" УСТАРЕЛ и скоро будет удален. Вместо него используйте метод ""ЗагрузитьКонфигурациюИзХранилища()""!"
			, СтатусСообщения.Внимание);

	ЗагрузитьКонфигурациюИзХранилища(СтрокаСоединения, ПользовательХранилища, ПарольХранилища, НомерВерсииХранилища);

КонецПроцедуры

// Выполняет загрузку конфигурации из хранилища конфигурации определенной версии, если задана, иначе получает последнюю версию.
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищу конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищу конфигурации
//  НомерВерсии  		  - Число -  Номер версии в истории в хранилище конфигурации, если 0 или меньше, то берется последняя версия.
//
Процедура ЗагрузитьКонфигурациюИзХранилища(Знач СтрокаСоединения, Знач ПользовательХранилища, Знач ПарольХранилища = "", Знач НомерВерсииХранилища = 0) Экспорт

	ПараметрыСвязиСБазой = СформироватьПараметрыСвязиСБазойДляПолучениеВерсииКонфигурацииИзХранилища(СтрокаСоединения, ПользовательХранилища, ПарольХранилища, НомерВерсииХранилища);

	ВыполнитьКоманду(ПараметрыСвязиСБазой);

КонецПроцедуры

// Выполняет загрузку конфигурации из хранилища конфигурации определенной версии, при этом обновляет базу данных
// Это необходимо, например, при последующем создании файла поставки, без обновления файл не будет создан.
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем конфигурации
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищу конфигурации
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищу конфигурации
//  НомерВерсии  		  - Число -  Номер версии в истории в хранилище конфигурации, если 0 или меньше, то берется последняя версия.
//
Процедура ОбновитьКонфигурациюБазыДанныхИзХранилища(Знач СтрокаСоединения, Знач ПользовательХранилища, Знач ПарольХранилища = "", Знач НомерВерсииХранилища = 0) Экспорт

	ПараметрыСвязиСБазой = СформироватьПараметрыСвязиСБазойДляПолучениеВерсииКонфигурацииИзХранилища(СтрокаСоединения, ПользовательХранилища, ПарольХранилища, НомерВерсииХранилища);

	ПараметрыСвязиСБазой.Добавить("/UpdateDBCfg");

	ВыполнитьКоманду(ПараметрыСвязиСБазой);

КонецПроцедуры

Функция СформироватьПараметрыСвязиСБазойДляПолучениеВерсииКонфигурацииИзХранилища(СтрокаСоединения, ПользовательХранилища, ПарольХранилища, НомерВерсииХранилища)

	ПараметрыСвязиСБазой = СтандартныеПараметрыЗапускаКонфигуратора();

	ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения + """");
	ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища + """");

	Если Не ПустаяСтрока(ПарольХранилища) Тогда
		ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryP """+ПарольХранилища + """");
	КонецЕсли;

	ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryUpdateCfg");
	// ВАЖНО!!!! Флаг <-v> должен быть обязательно после команды ConfigurationRepositoryUpdateCfg
	// Если это нарушить, то всегда получается последняя версия конфигурации
	Если НомерВерсииХранилища > 0 Тогда
		ПараметрыСвязиСБазой.Добавить("-v " + НомерВерсииХранилища);
	КонецЕсли;
	ПараметрыСвязиСБазой.Добавить("-force");

	Возврат ПараметрыСвязиСБазой;

КонецФункции

// Выполняет загрузку конфигурации расширения из хранилища, указанной версии.
//
// Параметры:
//  СтрокаСоединения 	  - Строка - Строка соединения с хранилищем расширения
//  ПользовательХранилища - строка - Пользователь для подключения к хранилищу расширения
//  ПарольХранилища 	  - Строка - Пароль пользователь для подключения к хранилищу расширения
//  ИмяРасширения 		  - Строка - Имя расширения
//  НомерВерсии  		  - Число -  Номер версии в истории в хранилище расширения, если 0 или меньше, то берется последняя версия.
//

Процедура РасширениеПолучитьИзХранилища(СтрокаСоединения, ПользовательХранилища, ПарольХранилища, ИмяРасширения, НомерВерсииХранилища = 0) Экспорт

	ПараметрыСвязиСБазой = СтандартныеПараметрыЗапускаКонфигуратора();
	ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryF """ + СтрокаСоединения + """");
	ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryN """ + ПользовательХранилища + """");

	Если Не ПустаяСтрока(ПарольХранилища) Тогда
		ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryP """ + ПарольХранилища + """");
	КонецЕсли;

	ПараметрыСвязиСБазой.Добавить("/ConfigurationRepositoryUpdateCfg");
	Если НомерВерсииХранилища > 0 Тогда
		ПараметрыСвязиСБазой.Добавить("-v " + НомерВерсииХранилища);
	КонецЕсли;
	ПараметрыСвязиСБазой.Добавить(СтрШаблон("-Extension ""%1""", ИмяРасширения));
	ПараметрыСвязиСБазой.Добавить("-force");
	ВыполнитьКоманду(ПараметрыСвязиСБазой);

КонецПроцедуры

Функция ВариантОбработкиНесуществующихСсылок() Экспорт

	Варианты = Новый Структура;
	Варианты.Вставить("СоздаватьОбъекты", 1);
	Варианты.Вставить("ОчищатьОбъекты",   2);
	Варианты.Вставить("НеИзменять",       3);

	Возврат Новый ФиксированнаяСтруктура(Варианты);

КонецФункции // ИмяФункции()

Функция ВариантОбработкиЧастичнойПотериДанных() Экспорт

	Варианты = Новый Структура;
	Варианты.Вставить("СоздаватьОбъекты", 1);
	Варианты.Вставить("УдалятьОбъекты",   2);

	Возврат Новый ФиксированнаяСтруктура(Варианты);

КонецФункции // ИмяФункции()

// Структура с возможными параметрами запуска ТиИ.
// По умолчанию включены все опции, нет ограничения по времени проведения тестирования.
//
// ВариантОбработкиНесуществующихСсылок:
//   - создавать объекты (по умолчанию)
//   - очищать объекты
//   - не изменять при частичной потере объектов
//
// ВариантОбработкиЧастичнойПотериДанных:
//   - создавать объекты (по умолчанию)
//   - удалять объекты
//
Функция ПолучитьОпцииТиИ() Экспорт

	ВариантыОбработкиНесуществующихСсылок = ВариантОбработкиНесуществующихСсылок();
	ВариантыОбработкиЧастичнойПотериДанных = ВариантОбработкиЧастичнойПотериДанных();


	СтруктураОпцииТиИ = Новый Структура;
	СтруктураОпцииТиИ.Вставить("ТолькоТестирование", Истина);
	СтруктураОпцииТиИ.Вставить("Реиндексация", Истина);
	СтруктураОпцииТиИ.Вставить("ЛогическаяЦелостность", Истина);
	СтруктураОпцииТиИ.Вставить("ЛогическаяИСсылочнаяЦелостность", Истина);
	СтруктураОпцииТиИ.Вставить("ПересчетИтогов", Истина);
	СтруктураОпцииТиИ.Вставить("СжатиеТаблиц", Истина);
	СтруктураОпцииТиИ.Вставить("Реструктуризация", Истина);
	СтруктураОпцииТиИ.Вставить("ВариантОбработкиНесуществующихСсылок", ВариантыОбработкиНесуществующихСсылок.СоздаватьОбъекты);
	СтруктураОпцииТиИ.Вставить("ВариантОбработкиЧастичнойПотериДанных", ВариантыОбработкиЧастичнойПотериДанных.СоздаватьОбъекты);
	СтруктураОпцииТиИ.Вставить("ПродолжитьТиИСТочкиПрерывания", Ложь);
	СтруктураОпцииТиИ.Вставить("МаксВремяТестирования", "");
	Возврат СтруктураОпцииТиИ;

КонецФункции // ПолучитьОпцииТиИ()

// Запустить тестирование и исправление с указанными опциями.
// Функция ПолучитьОпцииТиИ вернет структуру со всеми опциями.
// По умолчанию все опции включены. Отключаются переопределением значения.
//
// Параметры:
//   Параметры - Структура - Структура с опциями запуска. Если параметр не заполнен - делается полная проверка.
//
// Пример:
//   СтрокаСоединения =  "/Fc:\work\db\fin\";
//   УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
//   УправлениеКонфигуратором.УстановитьКонтекст(СтрокаСоединения, "", "");
//   // Полная проверка
//   УправлениеКонфигуратором.ЗапуститьТестированиеИИсправление();
//
//   ОпцииТиИ = УправлениеКонфигуратором.ПолучитьОпцииТиИ();
//   // Отключить проверку логической и ссылочной целостности
//   ОпцииТиИ.Вставить("ЛогическаяИСсылочнаяЦелостность", Ложь);
//   УправлениеКонфигуратором.ЗапуститьТестированиеИИсправление(ОпцииТиИ);
//
Процедура ЗапуститьТестированиеИИсправление(Параметры = Неопределено) Экспорт

	ПараметрыСвязиСБазой = СтандартныеПараметрыЗапускаКонфигуратора();
	ВариантыОбработкиНесуществующихСсылок = ВариантОбработкиНесуществующихСсылок();
	ВариантыОбработкиЧастичнойПотериДанных = ВариантОбработкиЧастичнойПотериДанных();

	Если Параметры = Неопределено Тогда
		Параметры = ПолучитьОпцииТиИ();
	КонецЕсли;

	СтрокаОпций = "/IBCheckAndRepair";
	СтрокаОпций = СтрокаОпций + ?(Параметры.ТолькоТестирование, " -TestOnly", "");
	СтрокаОпций = СтрокаОпций + ?(Параметры.Реиндексация, " -ReIndex", "");
	СтрокаОпций = СтрокаОпций + ?(Параметры.ЛогическаяЦелостность, " -LogIntegrity", "");
	СтрокаОпций = СтрокаОпций + ?(Параметры.ЛогическаяИСсылочнаяЦелостность, " -LogAndRefsIntegrity", "");
	СтрокаОпций = СтрокаОпций + ?(Параметры.ПересчетИтогов, " -RecalcTotals", "");
	СтрокаОпций = СтрокаОпций + ?(Параметры.СжатиеТаблиц, " -IBCompression", "");
	СтрокаОпций = СтрокаОпций + ?(Параметры.Реструктуризация, " -Rebuild", "");

	БитыеСсылки = Параметры.ВариантОбработкиНесуществующихСсылок;
	СтрокаОпций = СтрокаОпций + ?(БитыеСсылки = ВариантыОбработкиНесуществующихСсылок.СоздаватьОбъекты, " -BadRefCreate", ?(БитыеСсылки = ВариантыОбработкиНесуществующихСсылок.ОчищатьОбъекты, " -BadRefClear", " -BadRefNone"));

	ЧастичнаяПотеря = Параметры.ВариантОбработкиЧастичнойПотериДанных;
	СтрокаОпций = СтрокаОпций + ?(ЧастичнаяПотеря = ВариантыОбработкиЧастичнойПотериДанных.СоздаватьОбъекты, " -BadDataCreate", " -BadDataDelete");

	СтрокаОпций = СтрокаОпций + ?(Параметры.ПродолжитьТиИСТочкиПрерывания, " -UseStartPoint", "");

	СтрокаОпций = СтрокаОпций + ?(Параметры.МаксВремяТестирования = "", ""," -TimeLimit:" + Параметры.МаксВремяТестирования);

	ПараметрыСвязиСБазой.Добавить(СтрокаОпций);

	Лог.Отладка("Параметры запуска ТиИ: " + СтрокаОпций);

	ВыполнитьКоманду(ПараметрыСвязиСБазой);

КонецПроцедуры // ИмяПроцедуры()


// Функция проверяет возможность обновления файлов выгрузки, для каталога или конкретного файла версий
//
Функция ПроверитьВозможностьОбновленияФайловВыгрузки(Знач КаталогВыгрузки, Знач ПутьКФайлуВерсийДляСравнения = "", Знач ФорматВыгрузки = "")

	ПутьКФайлуИзменений = ВременныеФайлы.НовоеИмяФайла();
	ОбновлениеВозможно = Ложь;

	ТекущийФайлВерсийМетаданных = Новый Файл(ОбъединитьПути(КаталогВыгрузки, "ConfigDumpInfo.xml"));
	ФайлВерсийДляСравнения = Новый Файл(ПутьКФайлуВерсийДляСравнения);

	Если НЕ ТекущийФайлВерсийМетаданных.Существует() И ПустаяСтрока(ПутьКФайлуВерсийДляСравнения) Тогда
		Возврат ОбновлениеВозможно;
	КонецЕсли;

	ВыгрузитьИзмененияКонфигурацииВФайл(КаталогВыгрузки, ПутьКФайлуИзменений, ПутьКФайлуВерсийДляСравнения, ФорматВыгрузки);

	ФайлИзменений = Новый Файл(ПутьКФайлуИзменений);

	Если ФайлИзменений.Существует() Тогда
		СтрокаПолныйДамп = ВРег("FullDump");
		чтениеФайла = Новый ЧтениеТекста(ПутьКФайлуИзменений);
		СтрокаВыгрузки = Лев(ВРег(чтениеФайла.ПрочитатьСтроку()), СтрДлина(СтрокаПолныйДамп));

		Если Не ПустаяСтрока(СокрЛП(СтрокаВыгрузки)) Тогда

			Лог.Отладка("Строка проверки на возможность выгрузки конфигурации: <%1> = <%2> ", СтрокаПолныйДамп, СтрокаВыгрузки);
			ОбновлениеВозможно = НЕ (СтрокаВыгрузки = СтрокаПолныйДамп);

		КонецЕсли;
		чтениеФайла.Закрыть();

		ВременныеФайлы.УдалитьФайл(ПутьКФайлуИзменений);
	КонецЕсли;

	Возврат ОбновлениеВозможно;

КонецФункции

// Функция проверяет версию текущей платформы по сравнению с требуемой
//
Функция ИспользуемаяВерсияПлатформыСтаршеИлиРавна(Знач ТребуемаяВерсияПлатформы) Экспорт

	Лог.Отладка(СтрШаблон("Сравниваю версию <%1> с эталоном <%2>", мВерсияПлатформы, ТребуемаяВерсияПлатформы));

	РезультатСравнения = СтроковыеФункции.СравнитьВерсии(мВерсияПлатформы, ТребуемаяВерсияПлатформы);

	Возврат РезультатСравнения >= 0;

КонецФункции

Функция СформироватьСтрокуСоединения(ПараметрыСтрокиСоединения) Экспорт

	Если ТипЗнч(ПараметрыСтрокиСоединения) <> Тип("Структура") Тогда
		Возврат ПараметрыСтрокиСоединения;
	КонецЕсли;

	Если ПараметрыСтрокиСоединения.ПутьКФайлуБазы <> "" Тогда
		СтрокаСоединения = СтрШаблон("/F""%1""", ПараметрыСтрокиСоединения.ПутьКФайлуБазы);
	Иначе
		СтрокаСоединения = СтрШаблон(
			"/IBConnectionString""Srvr='%1:%2'; Ref='%3'""",
			ПараметрыСтрокиСоединения.Сервер,
			ПараметрыСтрокиСоединения.Порт,
			ПараметрыСтрокиСоединения.ИмяБазы);
	КонецЕсли;

	Возврат СтрокаСоединения;

КонецФункции

// возвращает параметры строки соединения с базой
//
// Возвращаемое значение:
//  - Структура
//    * Путь к файлу базы - строка - путь к базе в файловом варианте; если задан - остальные параметры игнорируются
//    * Сервер - Строка
//    * Порт - Строка
//    * ИмяБазы - Строка
//
Функция ПараметрыСтрокиСоединения() Экспорт

	ПараметрыСтрокиСоединения = Новый Структура;

	ПараметрыСтрокиСоединения.Вставить("ПутьКФайлуБазы", "");
	ПараметрыСтрокиСоединения.Вставить("Сервер", "");
	ПараметрыСтрокиСоединения.Вставить("Порт", "");
	ПараметрыСтрокиСоединения.Вставить("ИмяБазы", "");

	Возврат ПараметрыСтрокиСоединения;

КонецФункции

#КонецОбласти

Лог = Логирование.ПолучитьЛог("oscript.lib.v8runner");
Инициализация();
